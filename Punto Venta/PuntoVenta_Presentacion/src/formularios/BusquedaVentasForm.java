package formularios;

import entidades.Cliente;
import entidades.RelacionProductoVenta;
import entidades.Venta;
import interfaces.IClientesDAO;
import interfaces.IRelacionProductosVentasDAO;
import interfaces.IVentasDAO;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.function.Consumer;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Busquedas Form.
 *
 * @author Luis Gonzalo y José Jesús
 */
public class BusquedaVentasForm extends javax.swing.JFrame {

    /**
     * Ventas DAO.
     */
    private final IVentasDAO ventasDAO;
    /**
     * Clientes DAO.
     */
    private final IClientesDAO clientesDAO;
    /**
     * Relacion venta productoDAO
     */
    private final IRelacionProductosVentasDAO rpvDAO;

    /**
     * Lista Clientes.
     */
    private final List<Cliente> listaClientes;

    /**
     * Constructor del Form Ventas.
     *
     * @param ventasDAO Ventas DAO.
     * @param clientesDAO Clientes DAO.
     * @param rpvDAO Relacion producto venta.
     */
    public BusquedaVentasForm(IVentasDAO ventasDAO, IClientesDAO clientesDAO, IRelacionProductosVentasDAO rpvDAO) {
        initComponents();
        this.ventasDAO = ventasDAO;
        this.rpvDAO = rpvDAO;
        this.clientesDAO = clientesDAO;
        this.jDateChooser1.getDateEditor().setEnabled(false);
        this.jDateChooser2.getDateEditor().setEnabled(false);
        this.listaClientes = this.clientesDAO.consultarTodos();
        for (int i = 0; i < listaClientes.size(); i++) {
            Cliente cliente = listaClientes.get(i);
            jComboBoxCliente.addItem(cliente.getId() + " - " + cliente.getNombre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelFecha = new javax.swing.JLabel();
        jLabelCliente = new javax.swing.JLabel();
        jScrollPaneVenta = new javax.swing.JScrollPane();
        jTableVentas = new javax.swing.JTable();
        jLabelBuscador1 = new javax.swing.JLabel();
        jPanelBuscador = new javax.swing.JPanel();
        jButtonBuscar = new javax.swing.JButton();
        jComboBoxCliente = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanelDetalles = new javax.swing.JPanel();
        jLabelDetalles = new javax.swing.JLabel();
        jLabelProductos = new javax.swing.JLabel();
        jScrollPaneProductos = new javax.swing.JScrollPane();
        jTableProductos = new javax.swing.JTable();
        jLabelID1 = new javax.swing.JLabel();
        jLabelClienteDetalle1 = new javax.swing.JLabel();
        jLabelSubtotal1 = new javax.swing.JLabel();
        jLabelDescuento1 = new javax.swing.JLabel();
        jLabelTotal = new javax.swing.JLabel();
        jTextFieldTotalRespuesta = new javax.swing.JTextField();
        jTextFieldIDRespuesta = new javax.swing.JTextField();
        jTextFieldClienteDetalleRespuesta = new javax.swing.JTextField();
        jTextFieldSubtotalRespuesta = new javax.swing.JTextField();
        jTextFieldDescuentoRespuesta = new javax.swing.JTextField();
        jLabelFecha1 = new javax.swing.JLabel();
        jLabelFecha2 = new javax.swing.JLabel();
        jLabelFecha3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Búsqueda de Ventas ");
        setPreferredSize(new java.awt.Dimension(1035, 540));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabelFecha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelFecha.setText("Fechas");
        getContentPane().add(jLabelFecha);
        jLabelFecha.setBounds(20, 120, 80, 30);

        jLabelCliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCliente.setText("Cliente");
        getContentPane().add(jLabelCliente);
        jLabelCliente.setBounds(20, 70, 70, 20);

        jTableVentas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Venta", "Cliente", "Fecha", "Subtotal", "Descuento", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVentas.setCellSelectionEnabled(true);
        jTableVentas.getTableHeader().setReorderingAllowed(false);
        jTableVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVentasMouseClicked(evt);
            }
        });
        jScrollPaneVenta.setViewportView(jTableVentas);

        getContentPane().add(jScrollPaneVenta);
        jScrollPaneVenta.setBounds(20, 210, 480, 270);

        jLabelBuscador1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelBuscador1.setText("Bucador de Ventas");
        getContentPane().add(jLabelBuscador1);
        jLabelBuscador1.setBounds(20, 20, 170, 22);

        jPanelBuscador.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelBuscador.setLayout(null);

        jButtonBuscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });
        jPanelBuscador.add(jButtonBuscar);
        jButtonBuscar.setBounds(90, 160, 210, 30);

        jComboBoxCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos" }));
        jPanelBuscador.add(jComboBoxCliente);
        jComboBoxCliente.setBounds(90, 60, 210, 30);

        jDateChooser1.setBackground(new java.awt.Color(0, 0, 0));
        jDateChooser1.setDateFormatString("yyyy-MM-d");
        jDateChooser1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanelBuscador.add(jDateChooser1);
        jDateChooser1.setBounds(90, 110, 100, 30);

        jDateChooser2.setBackground(new java.awt.Color(0, 0, 0));
        jDateChooser2.setDateFormatString("yyyy-MM-d");
        jDateChooser2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanelBuscador.add(jDateChooser2);
        jDateChooser2.setBounds(200, 110, 100, 30);

        jLabel1.setText("Fecha Inicial");
        jPanelBuscador.add(jLabel1);
        jLabel1.setBounds(90, 140, 80, 20);

        jLabel2.setText("Fecha Final");
        jPanelBuscador.add(jLabel2);
        jLabel2.setBounds(200, 140, 80, 20);

        getContentPane().add(jPanelBuscador);
        jPanelBuscador.setBounds(10, 10, 500, 480);

        jPanelDetalles.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelDetalles.setLayout(null);

        jLabelDetalles.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelDetalles.setText("Detalles de Ventas");
        jPanelDetalles.add(jLabelDetalles);
        jLabelDetalles.setBounds(10, 10, 170, 22);

        jLabelProductos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelProductos.setText("Productos");
        jPanelDetalles.add(jLabelProductos);
        jLabelProductos.setBounds(10, 200, 80, 20);

        jTableProductos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Producto", "Nombre", "Precio actual", "Cantidad", "Monto total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProductos.setCellSelectionEnabled(true);
        jTableProductos.getTableHeader().setReorderingAllowed(false);
        jScrollPaneProductos.setViewportView(jTableProductos);

        jPanelDetalles.add(jScrollPaneProductos);
        jScrollPaneProductos.setBounds(20, 230, 480, 240);

        jLabelID1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelID1.setText("ID");
        jPanelDetalles.add(jLabelID1);
        jLabelID1.setBounds(10, 40, 30, 20);

        jLabelClienteDetalle1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelClienteDetalle1.setText("Cliente");
        jPanelDetalles.add(jLabelClienteDetalle1);
        jLabelClienteDetalle1.setBounds(10, 70, 70, 20);

        jLabelSubtotal1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelSubtotal1.setText("Subtotal");
        jPanelDetalles.add(jLabelSubtotal1);
        jLabelSubtotal1.setBounds(10, 100, 70, 20);

        jLabelDescuento1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelDescuento1.setText("Descuento");
        jPanelDetalles.add(jLabelDescuento1);
        jLabelDescuento1.setBounds(10, 130, 80, 20);

        jLabelTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelTotal.setText("Total");
        jPanelDetalles.add(jLabelTotal);
        jLabelTotal.setBounds(10, 160, 70, 20);

        jTextFieldTotalRespuesta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldTotalRespuesta.setEnabled(false);
        jPanelDetalles.add(jTextFieldTotalRespuesta);
        jTextFieldTotalRespuesta.setBounds(110, 160, 380, 23);

        jTextFieldIDRespuesta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldIDRespuesta.setEnabled(false);
        jPanelDetalles.add(jTextFieldIDRespuesta);
        jTextFieldIDRespuesta.setBounds(110, 40, 380, 23);

        jTextFieldClienteDetalleRespuesta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldClienteDetalleRespuesta.setEnabled(false);
        jPanelDetalles.add(jTextFieldClienteDetalleRespuesta);
        jTextFieldClienteDetalleRespuesta.setBounds(110, 70, 380, 23);

        jTextFieldSubtotalRespuesta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldSubtotalRespuesta.setEnabled(false);
        jPanelDetalles.add(jTextFieldSubtotalRespuesta);
        jTextFieldSubtotalRespuesta.setBounds(110, 100, 380, 23);

        jTextFieldDescuentoRespuesta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldDescuentoRespuesta.setEnabled(false);
        jPanelDetalles.add(jTextFieldDescuentoRespuesta);
        jTextFieldDescuentoRespuesta.setBounds(110, 130, 380, 23);

        getContentPane().add(jPanelDetalles);
        jPanelDetalles.setBounds(510, 10, 500, 480);

        jLabelFecha1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelFecha1.setText("Fechas");
        getContentPane().add(jLabelFecha1);
        jLabelFecha1.setBounds(20, 120, 80, 30);

        jLabelFecha2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelFecha2.setText("Fechas");
        getContentPane().add(jLabelFecha2);
        jLabelFecha2.setBounds(20, 120, 80, 30);

        jLabelFecha3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelFecha3.setText("Fechas");
        getContentPane().add(jLabelFecha3);
        jLabelFecha3.setBounds(20, 120, 80, 30);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo que valida las fechas de los jDate
     *
     * @param dateDesde Fecha Desde.
     * @param dateHasta Fecha Hasta.
     * @return true si son iguales, false en caso contrario.
     */
    private boolean validarFecha(Date dateDesde, Date dateHasta) {
        int yearD1 = dateDesde.getYear();
        int monthD1 = dateDesde.getMonth();
        int dia1 = dateDesde.getDate();
        int yearD2 = dateHasta.getYear();
        int monthD2 = dateHasta.getMonth();
        int dia2 = dateHasta.getDate();
        if (yearD1 == yearD2 && monthD1 == monthD2 && dia1 == dia2) {
            return true;
        }
        return false;
    }

    /**
     * Evento del boton buscar que busca las ventas, deacuerdo a diferentes
     * parametros.
     *
     * @param evt Evento.
     */
    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        Date date1 = this.jDateChooser1.getDate();
        Date date2 = this.jDateChooser2.getDate();

        if (date1 == null && date2 == null) {
            int indiceComboBoxClientes = this.jComboBoxCliente.getSelectedIndex();
            if (indiceComboBoxClientes == 0) {
                this.limpiarDetalles();
                this.llenarTablas(1, new Long(1), new GregorianCalendar(), new GregorianCalendar());
            } else {
                Long idCliente = listaClientes.get((indiceComboBoxClientes - 1)).getId();
                this.limpiarDetalles();
                this.llenarTablas(2, idCliente, new GregorianCalendar(), new GregorianCalendar());
            }
            return;
        }
        if ((date1 == null && date2 != null) || (date2 == null && date1 != null)) {
            JOptionPane.showMessageDialog(this, "Si desea hacer una búsqueda por fechas, seleccione ambas para poder proceder. ", "Advertencia", JOptionPane.WARNING_MESSAGE);
            this.jDateChooser1.setDate(null);
            this.jDateChooser2.setDate(null);
            return;
        }
        Calendar calendarDesde = new GregorianCalendar(date1.getYear() + 1900, date1.getMonth(), date1.getDate());
        Calendar calendarHasta = new GregorianCalendar(date2.getYear() + 1900, date2.getMonth(), date2.getDate());
        calendarHasta.set(Calendar.HOUR, 23);
        calendarHasta.set(Calendar.MINUTE, 59);
        calendarHasta.set(Calendar.SECOND, 59);
        calendarHasta.set(Calendar.MILLISECOND, 999);

        int indiceComboBoxClientes = this.jComboBoxCliente.getSelectedIndex();
        if (!date1.before(date2)) {
            JOptionPane.showMessageDialog(this, "La fecha inicial no debe de ser mayor a la final.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            if (indiceComboBoxClientes == 0) {
                if (this.validarFecha(date1, date2)) {
                    JOptionPane.showMessageDialog(this, "Las fecha inicial y final no deben de ser iguales.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else {
                    this.limpiarDetalles();
                    this.llenarTablas(3, new Long(1), calendarDesde, calendarHasta);
                }
            } else {
                Long idClienteAuxiliar = listaClientes.get((indiceComboBoxClientes - 1)).getId();
                if (this.validarFecha(date1, date2)) {
                    JOptionPane.showMessageDialog(this, "La fecha inicial y final no deben de ser iguales.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else {
                    this.limpiarDetalles();
                    this.llenarTablas(4, idClienteAuxiliar, calendarDesde, calendarHasta);
                }
            }
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    /**
     * Evento de la tabla de ventas mouse click.
     *
     * @param evt Evento.
     */
    private void jTableVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVentasMouseClicked
        Long ventaIndice = this.getVentaIndice();
        if (ventaIndice == null) {
            JOptionPane.showMessageDialog(this, "Debes de seleccionar una venta para continuar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int opcionSelecionada = JOptionPane.showConfirmDialog(this, "¿Deseas ver los detalles de la venta?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcionSelecionada == JOptionPane.NO_OPTION) {
            return;
        }
        Venta venta = this.ventasDAO.consultar(ventaIndice);
        this.llenarFormularioDetalle(venta);
        List<RelacionProductoVenta> listaRelacion = venta.getProductos();
        if (!listaRelacion.isEmpty()) {
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableProductos.getModel();
            modeloTabla.setRowCount(0);
            for (int i = 0; i < listaRelacion.size(); i++) {
                RelacionProductoVenta rpv = listaRelacion.get(i);
                Object[] fila = new Object[5];
                fila[0] = rpv.getProducto().getId();
                fila[1] = rpv.getProducto().getNombre();
                fila[2] = rpv.getProducto().getPrecioActual();
                fila[3] = rpv.getCantidad();
                fila[4] = rpv.getImporte();
                modeloTabla.addRow(fila);
            }
        } else {
            listaRelacion = this.rpvDAO.consultarRelacionesVentaProducto(venta.getId());
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableProductos.getModel();
            modeloTabla.setRowCount(0);
            for (int i = 0; i < listaRelacion.size(); i++) {
                RelacionProductoVenta rpv = listaRelacion.get(i);
                Object[] fila = new Object[5];
                fila[0] = rpv.getProducto().getId();
                fila[1] = rpv.getProducto().getNombre();
                fila[2] = rpv.getProducto().getPrecioActual();
                fila[3] = rpv.getCantidad();
                fila[4] = rpv.getImporte();
                modeloTabla.addRow(fila);
            }
        }

    }//GEN-LAST:event_jTableVentasMouseClicked
    /**
     * Metodo que nos ayuda a obtener el id de la venta.
     *
     * @return El id de la venta.
     */
    private Long getVentaIndice() {
        int indiceFilaSe = this.jTableVentas.getSelectedRow();
        if (indiceFilaSe != -1) {
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableVentas.getModel();
            int indiceColumna = 0;
            Long idVenta = (Long) modeloTabla.getValueAt(indiceFilaSe, indiceColumna);
            return idVenta;
        } else {
            return null;
        }
    }

    /**
     * Metodo para rellenar el formulariode la venta.
     *
     * @param venta
     */
    public void llenarFormularioDetalle(Venta venta) {
        this.jTextFieldIDRespuesta.setText(String.valueOf(venta.getId()));
        this.jTextFieldClienteDetalleRespuesta.setText(venta.getCliente().getNombre());
        if (venta.getDescuento() == 0) {
            this.jTextFieldSubtotalRespuesta.setText(String.valueOf(venta.getMontoTotal()));
            this.jTextFieldDescuentoRespuesta.setText("0");
            this.jTextFieldTotalRespuesta.setText(String.valueOf(venta.getMontoTotal()));
        } else {
            double subtotal = (((double) venta.getMontoTotal()) / ((double) venta.getDescuento())) * 100;
            this.jTextFieldSubtotalRespuesta.setText(String.valueOf(subtotal));
            this.jTextFieldDescuentoRespuesta.setText(String.valueOf(venta.getDescuento()));
            this.jTextFieldTotalRespuesta.setText(String.valueOf(venta.getMontoTotal()));
        }

    }

    /**
     * Metodo que limpia detalles de venta,
     */
    public void limpiarDetalles() {
        this.jTextFieldIDRespuesta.setText("");
        this.jTextFieldClienteDetalleRespuesta.setText("");
        this.jTextFieldSubtotalRespuesta.setText("");
        this.jTextFieldDescuentoRespuesta.setText("");
        this.jTextFieldTotalRespuesta.setText("");
        DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableProductos.getModel();
        modeloTabla.setRowCount(0);
    }

    /**
     * Metodo para rellenar las tablas de acuerdo a respectivas operaciones.
     *
     * @param operación 1=Todas la ventas. 2=Ventas en base al id del cliente.
     * 3=Ventas en un periodo de fechas. 4=Ventas id cliente y periodo de
     * fechas.
     * @param idCliente ID del cliente.
     * @param fechaDesde Fecha inicial.
     * @param fechaHasta Fecha final.
     */
    private void llenarTablas(int operación, Long idCliente, Calendar fechaDesde, Calendar fechaHasta) {
        List<Venta> listaVentas = new ArrayList<>();
        if (operación == 1) {
            listaVentas = this.ventasDAO.consultarTodos();
        }
        if (operación == 2) {
            listaVentas = this.ventasDAO.consultarVentasCliente(idCliente);
        }
        if (operación == 3) {
            listaVentas = this.ventasDAO.consultarVentasTodosPeriodo(fechaDesde, fechaHasta);
        }
        if (operación == 4) {
            listaVentas = this.ventasDAO.consultarVentasPeriodoCliente(idCliente, fechaDesde, fechaHasta);
        }

        DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableVentas.getModel();
        modeloTabla.setRowCount(0);
        listaVentas.forEach((Venta venta) -> {
            Object[] fila = new Object[6];
            fila[0] = venta.getId();
            fila[1] = venta.getCliente().getNombre();
            fila[2] = venta.getFecha().get(Calendar.YEAR) + "-" + (venta.getFecha().get(Calendar.MONTH) + 1) + "-" + venta.getFecha().get(Calendar.DAY_OF_MONTH);
            if (venta.getDescuento() == 0) {
                fila[3] = venta.getMontoTotal();
                fila[4] = venta.getDescuento();
                fila[5] = venta.getMontoTotal();
            } else {
                double subtotalf = (((double) venta.getMontoTotal()) / ((double) 100 - venta.getDescuento())) * 100;
                fila[3] = String.valueOf(subtotalf);
                fila[4] = venta.getDescuento();
                fila[5] = venta.getMontoTotal();
            }
            modeloTabla.addRow(fila);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JComboBox<String> jComboBoxCliente;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelBuscador1;
    private javax.swing.JLabel jLabelCliente;
    private javax.swing.JLabel jLabelClienteDetalle1;
    private javax.swing.JLabel jLabelDescuento1;
    private javax.swing.JLabel jLabelDetalles;
    private javax.swing.JLabel jLabelFecha;
    private javax.swing.JLabel jLabelFecha1;
    private javax.swing.JLabel jLabelFecha2;
    private javax.swing.JLabel jLabelFecha3;
    private javax.swing.JLabel jLabelID1;
    private javax.swing.JLabel jLabelProductos;
    private javax.swing.JLabel jLabelSubtotal1;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JPanel jPanelBuscador;
    private javax.swing.JPanel jPanelDetalles;
    private javax.swing.JScrollPane jScrollPaneProductos;
    private javax.swing.JScrollPane jScrollPaneVenta;
    private javax.swing.JTable jTableProductos;
    private javax.swing.JTable jTableVentas;
    private javax.swing.JTextField jTextFieldClienteDetalleRespuesta;
    private javax.swing.JTextField jTextFieldDescuentoRespuesta;
    private javax.swing.JTextField jTextFieldIDRespuesta;
    private javax.swing.JTextField jTextFieldSubtotalRespuesta;
    private javax.swing.JTextField jTextFieldTotalRespuesta;
    // End of variables declaration//GEN-END:variables
}

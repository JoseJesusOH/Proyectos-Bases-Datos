package formularios;

import entidades.Cliente;
import guis.utils.JButtonCellEditor;
import guis.utils.JButtonRenderer;
import interfaces.IClientesDAO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * Form de clientes.
 *
 * @author Luis Gonzalo y José Jesús.
 */
public class ClientesForm extends javax.swing.JFrame {

    /**
     * Axuliar producto eliminado.
     */
    private int auxiliar;
    /**
     * Axuliar id de cliente a eliminar.
     */
    private Long idCliente;

    /**
     * Constructor del Form Clientes.
     *
     * @param clienteDAO ConexionDAO
     */
    public ClientesForm(IClientesDAO clienteDAO) {
        initComponents();
        this.auxiliar = -1;
        this.idCliente = null;
        this.clienteDAO = clienteDAO;
        this.initTablaClientes();
        this.llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBuscador = new javax.swing.JPanel();
        lblDireccion = new javax.swing.JLabel();
        lblIDCliente = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblRFC = new javax.swing.JLabel();
        campoTextoDireccion = new javax.swing.JTextField();
        campoTextoIDCliente = new javax.swing.JTextField();
        campoTextoNombre = new javax.swing.JTextField();
        campoTextoTelefono = new javax.swing.JTextField();
        campoTextoRFC = new javax.swing.JTextField();
        botonGuardar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();
        lblClientes = new javax.swing.JLabel();
        panel1 = new javax.swing.JPanel();
        panelTablaClientes = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        lblClientesActuales = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clientes");
        setPreferredSize(new java.awt.Dimension(1050, 450));
        setResizable(false);
        getContentPane().setLayout(null);

        panelBuscador.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelBuscador.setLayout(null);

        lblDireccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDireccion.setText("Dirección");
        panelBuscador.add(lblDireccion);
        lblDireccion.setBounds(20, 270, 80, 30);

        lblIDCliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblIDCliente.setText("ID Cliente");
        panelBuscador.add(lblIDCliente);
        lblIDCliente.setBounds(20, 70, 80, 30);

        lblNombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNombre.setText("Nombre");
        panelBuscador.add(lblNombre);
        lblNombre.setBounds(20, 120, 80, 30);

        lblTelefono.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTelefono.setText("Teléfono");
        panelBuscador.add(lblTelefono);
        lblTelefono.setBounds(20, 170, 80, 30);

        lblRFC.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRFC.setText("RFC");
        panelBuscador.add(lblRFC);
        lblRFC.setBounds(20, 220, 80, 30);
        panelBuscador.add(campoTextoDireccion);
        campoTextoDireccion.setBounds(120, 270, 200, 30);

        campoTextoIDCliente.setEnabled(false);
        panelBuscador.add(campoTextoIDCliente);
        campoTextoIDCliente.setBounds(120, 70, 200, 30);
        panelBuscador.add(campoTextoNombre);
        campoTextoNombre.setBounds(120, 120, 200, 30);
        panelBuscador.add(campoTextoTelefono);
        campoTextoTelefono.setBounds(120, 170, 200, 30);
        panelBuscador.add(campoTextoRFC);
        campoTextoRFC.setBounds(120, 220, 200, 30);

        botonGuardar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botonGuardar.setText("Guardar");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        panelBuscador.add(botonGuardar);
        botonGuardar.setBounds(50, 330, 100, 30);

        botonCancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });
        panelBuscador.add(botonCancelar);
        botonCancelar.setBounds(190, 330, 100, 30);

        lblClientes.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblClientes.setText("Clientes");
        panelBuscador.add(lblClientes);
        lblClientes.setBounds(20, 20, 170, 22);

        getContentPane().add(panelBuscador);
        panelBuscador.setBounds(10, 10, 330, 380);

        panel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel1.setLayout(null);

        tablaClientes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Cliente", "Nombre", "Teléfono", "RFC", "Dirección", "Editar", "Eliminar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaClientes.setCellSelectionEnabled(true);
        tablaClientes.getTableHeader().setReorderingAllowed(false);
        tablaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClientesMouseClicked(evt);
            }
        });
        panelTablaClientes.setViewportView(tablaClientes);

        panel1.add(panelTablaClientes);
        panelTablaClientes.setBounds(10, 70, 650, 240);

        lblClientesActuales.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblClientesActuales.setText("Clientes Actuales");
        panel1.add(lblClientesActuales);
        lblClientesActuales.setBounds(10, 10, 170, 50);

        getContentPane().add(panel1);
        panel1.setBounds(340, 10, 690, 380);

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Evento del boton eliminar.
     *
     * @param evt Evento.
     */
    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_botonCancelarActionPerformed
    /**
     * Evento del boton guardar.
     *
     * @param evt Evento.
     */
    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_botonGuardarActionPerformed
    /**
     * Evento mouse click auxiliar que nos ayuda a eliminar un cliente.
     *
     * @param evt Evento.
     */
    private void tablaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClientesMouseClicked
        if (auxiliar == 1) {
            eliminar(idCliente);
        }
        auxiliar = -1;
        idCliente = null;
    }//GEN-LAST:event_tablaClientesMouseClicked

    /**
     * Metodo que valida si la cadena es un entero.
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validaEntero(String s) {
        CharSequence cadena = s.trim();
        String reCadena = "^\\d+$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que valida un RFC.
     *
     * @param s RFC a Evaluar.
     * @return true si el rfc cumple con los requisitos, false en caso
     * contrario.
     */
    private static boolean validaRFC(String s) {
        CharSequence cadena = s.trim();
        String reCadena = "^([A-ZÑ\\x26]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])([A-Z]|[0-9]){2}([A]|[0-9]){1})?$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que vealida los campos de texto telefono y RFC.
     *
     * @return true si presentan alguna irregularidad, false en caso contrario.
     */
    private boolean verificarDatosEspeciales() {
        String telefono = this.campoTextoTelefono.getText();
        String rfc = this.campoTextoRFC.getText().toUpperCase();
        if (telefono.length() != 0) {
            if (!this.validaEntero(telefono)) {
                JOptionPane.showMessageDialog(this, "Solo se aceptan números para registrar un teléfono.", "Error", JOptionPane.ERROR_MESSAGE);
                return true;
            }
            if (telefono.length() > 15) {
                JOptionPane.showMessageDialog(this, "El máximo número de dígitos para registrar un teléfono es 15.", "Error", JOptionPane.ERROR_MESSAGE);
                return true;
            }
        }
        if (!validaRFC(rfc)) {
            JOptionPane.showMessageDialog(this, "El RFC no es válido. Ejemplo: MELM8305281H0.", "Error RFC", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo que verifica si los campos de texto se encuentran vacios a
     * excepcion del celular.
     *
     * @return true si estan vacios, false en caso contrario.
     */
    private boolean verificarDatosVacios() {
        if (this.campoTextoNombre.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el nombre antes de guardar/actualizar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.campoTextoRFC.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el RFC antes de guardar/actualizar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.campoTextoDireccion.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir la dirección antes de guardar/actualizar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo que valida el tamño de los campos de texto a excepcion del
     * celular.
     *
     * @return true si presentan alguna irregularidad, false en caso contrario.
     */
    private boolean verificarCantidadTamanho() {
        String nombre = this.campoTextoNombre.getText();
        String rfc = this.campoTextoRFC.getText();
        String dirección = this.campoTextoDireccion.getText();
        if (nombre.length() > 45) {
            JOptionPane.showMessageDialog(this, "El nombre es demasiado largo, máximo 45 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (rfc.length() > 15) {
            JOptionPane.showMessageDialog(this, "El rfc es demasiado largo, máximo 15 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (dirección.length() > 100) {
            JOptionPane.showMessageDialog(this, "La dirección es demasiado larga, máximo 100 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo auxiliar que nos ayuda a guardar o actualizar un producto.
     */
    private void guardar() {
        if (this.campoTextoIDCliente.getText().isEmpty()) {
            this.agregar();
        } else {
            this.actualizar();
        }
    }

    /**
     * Metodo que agrega un cliente a la base de datos.
     */
    private void agregar() {
        if (this.verificarDatosVacios()) {
            return;
        }
        if (this.verificarCantidadTamanho()) {
            return;
        }
        if (this.verificarDatosEspeciales()) {
            return;
        }

        String nombre = this.campoTextoNombre.getText();
        String telefono = this.campoTextoTelefono.getText();
        String rfc = this.campoTextoRFC.getText().toUpperCase();
        String direccion = this.campoTextoDireccion.getText();
        Cliente cliente = new Cliente(direccion, nombre, rfc, telefono);
        Cliente clienteRFC = this.clienteDAO.consultarCliente(rfc);
        if (clienteRFC != null) {
            JOptionPane.showMessageDialog(this, "No se pudo agregar el cliente ya existe uno que tiene el mismo RFC.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            boolean seAgregoCliente = this.clienteDAO.agregar(cliente);
            if (seAgregoCliente) {
                JOptionPane.showMessageDialog(this, "Se agregó el cliente.", "Información", JOptionPane.INFORMATION_MESSAGE);
                this.limpiar();
                this.llenarTabla();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo agregar el cliente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Metodo axuliar que rellena el formulario del cliente a actualizar.
     *
     * @param idCliente Id del cliente
     */
    private void editar(Long idCliente) {
        Cliente c = this.clienteDAO.consultar(idCliente);
        this.llenarFormulario(c);
    }

    /**
     * Metodo auxiliar que nos ayuda a eliminar un cliente.
     *
     * @param idCliente Id del cliente a eliminar.
     */
    private void eliminar(Long idCliente) {
        int opcionSelecionada = JOptionPane.showConfirmDialog(this, "¿Estás seguro de eliminar el cliente?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcionSelecionada == JOptionPane.YES_OPTION) {
            boolean seEliminoCliente = this.clienteDAO.eliminar(idCliente);
            if (seEliminoCliente) {
                JOptionPane.showMessageDialog(this, "Se eliminó el cliente.", "Información", JOptionPane.INFORMATION_MESSAGE);
                this.llenarTabla();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el cliente, este está relacionado con una venta. Si desea eliminarlo por favor elimine el registros mencionados.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Metodo para actualizar un cliente.
     */
    private void actualizar() {
        Long idClienteD = Long.valueOf(this.campoTextoIDCliente.getText());

        if (this.verificarDatosVacios()) {
            return;
        }
        if (this.verificarCantidadTamanho()) {
            return;
        }
        if (this.verificarDatosEspeciales()) {
            return;
        }

        String nombre = this.campoTextoNombre.getText();
        String telefono = this.campoTextoTelefono.getText();
        String rfc = this.campoTextoRFC.getText();
        String direccion = this.campoTextoDireccion.getText();
        Cliente cliente = new Cliente(idClienteD, direccion, nombre, rfc, telefono);
        boolean seActualizoCliente = this.clienteDAO.actualizar(cliente);
        if (seActualizoCliente) {
            JOptionPane.showMessageDialog(this, "Se actualizó el cliente.", "Información", JOptionPane.INFORMATION_MESSAGE);
            this.limpiar();
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el cliente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metodo que rellena el formulario en base al cliente.
     *
     * @param cliente CLiente que se desea que el formulario sea rellenado.
     */
    private void llenarFormulario(Cliente cliente) {
        this.campoTextoIDCliente.setText(String.valueOf(cliente.getId()));
        this.campoTextoNombre.setText(cliente.getNombre());
        this.campoTextoDireccion.setText(cliente.getDireccion());
        this.campoTextoTelefono.setText(cliente.getTelefono());
        this.campoTextoRFC.setText(cliente.getRfc());
    }

    /**
     * Limpia campos de texto,
     */
    private void limpiar() {
        this.campoTextoIDCliente.setText("");
        this.campoTextoNombre.setText("");
        this.campoTextoDireccion.setText("");
        this.campoTextoTelefono.setText("");
        this.campoTextoRFC.setText("");
    }

    /**
     * Metodo que rellena la tabla con los clientes de la base de datos.
     */
    private void llenarTabla() {
        List<Cliente> listaClientes = this.clienteDAO.consultarTodos();
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaClientes.getModel();
        modeloTabla.setRowCount(0);
        listaClientes.forEach(cliente -> {
            Object[] fila = new Object[7];
            fila[0] = cliente.getId();
            fila[1] = cliente.getNombre();
            fila[2] = cliente.getTelefono();
            fila[3] = cliente.getRfc();
            fila[4] = cliente.getDireccion();
            fila[5] = "Editar";
            fila[6] = "Eliminar";
            modeloTabla.addRow(fila);
        });
    }

    /**
     * Metodo de apoyo.
     */
    private void initTablaClientes() {
        ActionListener onEditarClienteClickListener = new ActionListener() {
            final int columnaId = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                int filaSeleccionada = tablaClientes.getSelectedRow();
                Long idCliente = (Long) tablaClientes.getValueAt(filaSeleccionada, columnaId);
                editar(idCliente);
            }
        };
        ActionListener onEliminarClienteClickListener = (ActionEvent e) -> {
            final int columnaId = 0;
            auxiliar = 1;
            int filaSeleccionada = tablaClientes.getSelectedRow();
            idCliente = (Long) tablaClientes.getValueAt(filaSeleccionada, columnaId);
        };
        int indiceColumnaEditar = 5;
        TableColumnModel modeloColumnas = this.tablaClientes.getColumnModel();
        modeloColumnas.getColumn(indiceColumnaEditar).setCellRenderer(new JButtonRenderer("Editar"));
        modeloColumnas.getColumn(indiceColumnaEditar).setCellEditor(new JButtonCellEditor(new JTextField(), onEditarClienteClickListener));
        int indiceColumnaEliminar = 6;
        modeloColumnas.getColumn(indiceColumnaEliminar).setCellRenderer(new JButtonRenderer("Eliminar"));
        modeloColumnas.getColumn(indiceColumnaEliminar).setCellEditor(new JButtonCellEditor(new JTextField(), onEliminarClienteClickListener));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JTextField campoTextoDireccion;
    private javax.swing.JTextField campoTextoIDCliente;
    private javax.swing.JTextField campoTextoNombre;
    private javax.swing.JTextField campoTextoRFC;
    private javax.swing.JTextField campoTextoTelefono;
    private javax.swing.JLabel lblClientes;
    private javax.swing.JLabel lblClientesActuales;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblIDCliente;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblRFC;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panelBuscador;
    private javax.swing.JScrollPane panelTablaClientes;
    private javax.swing.JTable tablaClientes;
    // End of variables declaration//GEN-END:variables
    private final IClientesDAO clienteDAO;
}

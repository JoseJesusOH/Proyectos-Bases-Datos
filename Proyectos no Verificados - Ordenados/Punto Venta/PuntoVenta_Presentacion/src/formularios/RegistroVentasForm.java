package formularios;

import entidades.Cliente;
import entidades.Producto;
import entidades.RelacionProductoVenta;
import entidades.Venta;
import interfaces.IClientesDAO;
import interfaces.IProductosDAO;
import interfaces.IRelacionProductosVentasDAO;
import interfaces.IVentasDAO;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Registro de ventas Form.
 *
 * @author Luis Gonzalo y José Jesús
 */
public class RegistroVentasForm extends javax.swing.JFrame {

    /**
     * Ventas DAO.
     */
    private final IVentasDAO ventasDAO;
    /**
     * Productos DAO.
     */
    private final IProductosDAO productosDAO;
    /**
     * Clientes DAO.
     */
    private final IClientesDAO clientesDAO;
    /**
     * Relacion Producto Ventas DAO.
     */
    private final IRelacionProductosVentasDAO rpvDAO;
    /**
     * Subtotal venta.
     */
    private double subtotal = 0;
    /**
     * Auxliar Contador.
     */
    private int contador = 0;
    /**
     * listaClientes DAO
     */
    private final List<Cliente> listaClientes;
    /**
     * Lista auxiliar Productos.
     */
    private List<Producto> auxiliarProductos;
    /**
     * Lista axulidar cantidad.
     */
    private List<Integer> auxiliarCantidad;

    /**
     * Creates new form RegistroVentasForm
     *
     * @param ventasDAO Ventas DAO
     * @param productosDAO Productos DAO
     * @param clientesDAO Clientes DAO
     * @param rpvDAO Relacion PRoducto Ventas DAO
     */
    public RegistroVentasForm(IVentasDAO ventasDAO, IProductosDAO productosDAO, IClientesDAO clientesDAO, IRelacionProductosVentasDAO rpvDAO) {
        initComponents();
        this.ventasDAO = ventasDAO;
        this.productosDAO = productosDAO;
        this.clientesDAO = clientesDAO;
        this.rpvDAO = rpvDAO;
        this.auxiliarCantidad = new ArrayList<>();
        this.auxiliarProductos = new ArrayList<>();
        this.listaClientes = this.clientesDAO.consultarTodos();
        for (int i = 0; i < listaClientes.size(); i++) {
            Cliente cliente = listaClientes.get(i);
            jComboBoxCliente.addItem(cliente.getId() + " - " + cliente.getNombre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBuscador = new javax.swing.JPanel();
        jLabelTotal = new javax.swing.JLabel();
        jLabelCliente = new javax.swing.JLabel();
        jLabelSubtotal = new javax.swing.JLabel();
        jLabelDescuento = new javax.swing.JLabel();
        jComboBoxCliente = new javax.swing.JComboBox<>();
        jTextFieldTotalRespuesta = new javax.swing.JTextField();
        jTextFieldSubtotalRespuesta = new javax.swing.JTextField();
        jTextFieldDescuento = new javax.swing.JTextField();
        jLabelDetalles = new javax.swing.JLabel();
        jLabelDetalles3 = new javax.swing.JLabel();
        jButtonRegistrar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jPanelBuscadorP = new javax.swing.JPanel();
        jTextFieldBuscador = new javax.swing.JTextField();
        jScrollPaneProductosB = new javax.swing.JScrollPane();
        jTableProductosB = new javax.swing.JTable();
        jLabelBuscador = new javax.swing.JLabel();
        jButtonBuscar = new javax.swing.JButton();
        jLabelDetalles1 = new javax.swing.JLabel();
        jPanelSelecciónP = new javax.swing.JPanel();
        jScrollPaneProductosS = new javax.swing.JScrollPane();
        jTableProductosS = new javax.swing.JTable();
        jLabelProductosSelccionados = new javax.swing.JLabel();
        jLabelDetalles2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ventas");
        setPreferredSize(new java.awt.Dimension(950, 650));
        getContentPane().setLayout(null);

        jPanelBuscador.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelBuscador.setLayout(null);

        jLabelTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelTotal.setText("Total");
        jPanelBuscador.add(jLabelTotal);
        jLabelTotal.setBounds(20, 200, 70, 20);

        jLabelCliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCliente.setText("Cliente");
        jPanelBuscador.add(jLabelCliente);
        jLabelCliente.setBounds(20, 60, 70, 20);

        jLabelSubtotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelSubtotal.setText("Subtotal");
        jPanelBuscador.add(jLabelSubtotal);
        jLabelSubtotal.setBounds(20, 110, 70, 20);

        jLabelDescuento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelDescuento.setText("Descuento");
        jPanelBuscador.add(jLabelDescuento);
        jLabelDescuento.setBounds(20, 150, 80, 30);

        jComboBoxCliente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanelBuscador.add(jComboBoxCliente);
        jComboBoxCliente.setBounds(110, 50, 170, 30);

        jTextFieldTotalRespuesta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldTotalRespuesta.setEnabled(false);
        jPanelBuscador.add(jTextFieldTotalRespuesta);
        jTextFieldTotalRespuesta.setBounds(110, 200, 170, 30);

        jTextFieldSubtotalRespuesta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldSubtotalRespuesta.setEnabled(false);
        jPanelBuscador.add(jTextFieldSubtotalRespuesta);
        jTextFieldSubtotalRespuesta.setBounds(110, 100, 170, 30);

        jTextFieldDescuento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldDescuento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldDescuentoFocusLost(evt);
            }
        });
        jPanelBuscador.add(jTextFieldDescuento);
        jTextFieldDescuento.setBounds(110, 150, 170, 30);

        jLabelDetalles.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelDetalles.setText("Detalles de Ventas");
        jPanelBuscador.add(jLabelDetalles);
        jLabelDetalles.setBounds(10, 10, 170, 22);

        jLabelDetalles3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelDetalles3.setText("___________________________");
        jPanelBuscador.add(jLabelDetalles3);
        jLabelDetalles3.setBounds(0, 270, 320, 22);

        jButtonRegistrar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonRegistrar.setText("Registrar");
        jButtonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarActionPerformed(evt);
            }
        });
        jPanelBuscador.add(jButtonRegistrar);
        jButtonRegistrar.setBounds(50, 240, 90, 30);

        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        jPanelBuscador.add(jButtonCancelar);
        jButtonCancelar.setBounds(170, 240, 90, 30);

        getContentPane().add(jPanelBuscador);
        jPanelBuscador.setBounds(10, 10, 300, 580);

        jPanelBuscadorP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelBuscadorP.setLayout(null);
        jPanelBuscadorP.add(jTextFieldBuscador);
        jTextFieldBuscador.setBounds(10, 50, 430, 30);

        jTableProductosB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableProductosB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Producto", "Nombre", "Precio actual", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProductosB.setCellSelectionEnabled(true);
        jTableProductosB.getTableHeader().setReorderingAllowed(false);
        jTableProductosB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductosBMouseClicked(evt);
            }
        });
        jScrollPaneProductosB.setViewportView(jTableProductosB);

        jPanelBuscadorP.add(jScrollPaneProductosB);
        jScrollPaneProductosB.setBounds(10, 90, 580, 180);

        jLabelBuscador.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelBuscador.setText("Buscador de Productos");
        jPanelBuscadorP.add(jLabelBuscador);
        jLabelBuscador.setBounds(10, 10, 230, 22);

        jButtonBuscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });
        jPanelBuscadorP.add(jButtonBuscar);
        jButtonBuscar.setBounds(450, 50, 140, 30);

        getContentPane().add(jPanelBuscadorP);
        jPanelBuscadorP.setBounds(310, 10, 610, 290);

        jLabelDetalles1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelDetalles1.setText("Detalles de Ventas");
        getContentPane().add(jLabelDetalles1);
        jLabelDetalles1.setBounds(20, 20, 170, 22);

        jPanelSelecciónP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelSelecciónP.setLayout(null);

        jTableProductosS.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableProductosS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Producto", "Nombre", "Precio actual", "Cantidad", "Monto total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProductosS.setCellSelectionEnabled(true);
        jTableProductosS.getTableHeader().setReorderingAllowed(false);
        jTableProductosS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductosSMouseClicked(evt);
            }
        });
        jScrollPaneProductosS.setViewportView(jTableProductosS);

        jPanelSelecciónP.add(jScrollPaneProductosS);
        jScrollPaneProductosS.setBounds(10, 40, 580, 240);

        jLabelProductosSelccionados.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelProductosSelccionados.setText("Productos Seleccionados");
        jPanelSelecciónP.add(jLabelProductosSelccionados);
        jLabelProductosSelccionados.setBounds(10, 10, 230, 22);

        getContentPane().add(jPanelSelecciónP);
        jPanelSelecciónP.setBounds(310, 300, 610, 290);

        jLabelDetalles2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelDetalles2.setText("Detalles de Ventas");
        getContentPane().add(jLabelDetalles2);
        jLabelDetalles2.setBounds(20, 20, 170, 22);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento del boton buscar que valida el campo de texto y busca productos.
     *
     * @param evt Evento.
     */
    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        String textoBuscar = this.jTextFieldBuscador.getText();
        if (textoBuscar.length() == 0) {
            this.llenarTablablas(1, new Long(1), "");
            return;
        }
        if (!this.validaEntero(textoBuscar)) {
            this.llenarTablablas(3, new Long(1), textoBuscar);
            this.jTextFieldBuscador.setText("");
        } else {
            Long idProducto = null;
            try {
                idProducto = Long.parseLong(textoBuscar);
            } catch (NumberFormatException e) {
            }
            if (idProducto != null) {
                this.llenarTablablas(2, idProducto, "");
            }
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    /**
     * Evento del tabla de productos de busqued que agrega productos a la tabla
     * de productos selccionados.
     *
     * @param evt Evento.
     */
    private void jTableProductosBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductosBMouseClicked
        if (evt.getClickCount() == 2) {
            if (this.validarDescuento()) {
                return;
            }
            Producto productoSeleccionado = this.getProductoSeleccionadoBuscados();
            boolean contiene = auxiliarProductos.contains(productoSeleccionado);
            if (contiene) {
                int indice = auxiliarProductos.indexOf(productoSeleccionado);
                int cantidadProducto = auxiliarCantidad.get(indice);
                if (cantidadProducto <= productoSeleccionado.getStock() - 1) {
                    auxiliarCantidad.set(indice, (cantidadProducto) + 1);
                    this.tablaProductosSeelccionados();
                } else {
                    String nombre = auxiliarProductos.get(indice).getNombre();
                    Long id = auxiliarProductos.get(indice).getId();
                    JOptionPane.showMessageDialog(this, "ID: " + id + " Nombre: " + nombre + " ya superó el límite de lo que hay en existencia.", "Advertencia Producto", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                auxiliarProductos.add(productoSeleccionado);
                auxiliarCantidad.add(1);
                this.tablaProductosSeelccionados();
            }
        }

    }//GEN-LAST:event_jTableProductosBMouseClicked
    /**
     * Evento mouse de la tabla de productos seleccionados el cual elimina un
     * producto de la tabla y lista de productos.
     *
     * @param evt Evento.
     */
    private void jTableProductosSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductosSMouseClicked
        if (evt.getClickCount() == 2) {
            if (this.validarDescuento()) {
                return;
            }
            int filaSelecionada = this.jTableProductosS.getSelectedRow();
            if (filaSelecionada != -1) {
                int opcionSelecionada = JOptionPane.showConfirmDialog(this, "¿Estás seguro de eliminar el producto, este se eliminará completamente?", "Confirmación", JOptionPane.YES_NO_OPTION);
                if (opcionSelecionada == JOptionPane.YES_OPTION) {
                    Producto p = this.getProductoSeleccionadoEliminados();
                    int indice = auxiliarProductos.indexOf(p);
                    auxiliarProductos.remove(indice);
                    auxiliarCantidad.remove(indice);
                    DefaultTableModel modeloTablaD = (DefaultTableModel) this.jTableProductosS.getModel();
                    modeloTablaD.removeRow(filaSelecionada);
                    this.tablaProductosSeelccionados();
                }
            }
        }


    }//GEN-LAST:event_jTableProductosSMouseClicked
    /**
     * Evento del campo de descuento el cual al perder el foco recalcula, el
     * total.
     *
     * @param evt Evento.
     */
    private void jTextFieldDescuentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDescuentoFocusLost
        String descuento = this.jTextFieldDescuento.getText();
        if (descuento.equalsIgnoreCase("-0") || descuento.equalsIgnoreCase("-0.0")) {
            this.jTextFieldDescuento.setText("0");
        }
        this.calcularTotal();
    }//GEN-LAST:event_jTextFieldDescuentoFocusLost
    /**
     * Evento del boton registrar el registra una venta.
     *
     * @param evt Evento.
     */
    private void jButtonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarActionPerformed
        // TODO add your handling code here:
        if (auxiliarProductos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se pudo agregar la venta, debe de selecionar algun producto.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (this.validarDescuento()) {
            return;
        }

        int indiceComboBoxClientes = this.jComboBoxCliente.getSelectedIndex();
        String clienteNombre = this.listaClientes.get(indiceComboBoxClientes).getNombre();
        String subtotalF = this.jTextFieldSubtotalRespuesta.getText();
        String descuento = this.jTextFieldDescuento.getText();
        String total = this.jTextFieldTotalRespuesta.getText();
        Calendar calendar = Calendar.getInstance();
        String fecha = (calendar.get(Calendar.YEAR)) + "-" + (calendar.get(Calendar.MONTH) + 1) + "-" + calendar.get(Calendar.DAY_OF_MONTH);
        int opcionSelecionada = JOptionPane.showConfirmDialog(this, "¿Desea registrar la venta oficialmente? \n Detalle de Venta \n Cliente: " + clienteNombre + " \n Fecha: " + fecha + " \n Subtotal: " + subtotalF + " \n Descuento: " + descuento + " \n Total: " + total, "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcionSelecionada == JOptionPane.YES_OPTION) {
            Cliente cliente = this.listaClientes.get(indiceComboBoxClientes);
            Venta venta = new Venta(Float.valueOf(descuento), calendar, Float.valueOf(total));
            venta.setCliente(cliente);
            boolean seAgregoVenta = this.ventasDAO.agregar(venta);
            if (seAgregoVenta) {
                Long idVen = this.ventasDAO.idUltimaVenta();
                Venta ventaD = this.ventasDAO.consultar(idVen);
                List<RelacionProductoVenta> lista = new ArrayList<>();
                List<Producto> listaProductosAuxliar = auxiliarProductos;
                listaProductosAuxliar.forEach(producto -> {
                    Object[] fila = new Object[5];
                    fila[0] = producto.getId();
                    fila[1] = producto.getNombre();
                    fila[2] = producto.getPrecioActual();
                    fila[3] = auxiliarCantidad.get(contador);
                    double d = auxiliarCantidad.get(contador) * producto.getPrecioActual();
                    fila[4] = d;
                    RelacionProductoVenta rp = new RelacionProductoVenta(auxiliarCantidad.get(contador), producto.getPrecioActual(), new Float(String.valueOf(d)));
                    rp.setProducto(producto);
                    rp.setVenta(ventaD);
                    lista.add(rp);
                    contador++;
                });
                contador = 0;
                auxiliarProductos.forEach(producto -> {
                    producto.setStock(producto.getStock() - auxiliarCantidad.get(contador));
                    contador++;
                    this.productosDAO.actualizar(producto);
                });
                contador = 0;
                this.rpvDAO.agregar(lista);
                JOptionPane.showMessageDialog(this, "Se ha agregado la venta con éxito." + "ID de la venta: " + idVen + ".", "Información", JOptionPane.INFORMATION_MESSAGE);
                this.restablecerCampos();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo agregar agregar la venta.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonRegistrarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.restablecerCampos();
    }//GEN-LAST:event_jButtonCancelarActionPerformed
    /**
     * Metodo que valida si la cadena es un entero.
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validaEntero(String s) {
        String reCadena = "^\\d+$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(s);
        return matcher.matches();
    }

    /**
     * Metodo que valida si la cadena es doble.
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validarDobles(String as) {
        CharSequence cadena = as.trim();
        String reCadena = "^[0-9]+([.][0-9]+)?$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que rellena la tabla de productos seleccionados.
     */
    private void tablaProductosSeelccionados() {
        subtotal = 0;
        List<Producto> listaProductosAuxliar = auxiliarProductos;
        DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableProductosS.getModel();
        modeloTabla.setRowCount(0);
        listaProductosAuxliar.forEach(producto -> {
            Object[] fila = new Object[5];
            fila[0] = producto.getId();
            fila[1] = producto.getNombre();
            fila[2] = producto.getPrecioActual();
            fila[3] = auxiliarCantidad.get(contador);
            double calculo = auxiliarCantidad.get(contador) * producto.getPrecioActual();
            fila[4] = calculo;
            subtotal = subtotal + calculo;
            contador++;
            modeloTabla.addRow(fila);
        }
        );
        contador = 0;
        calcularTotal();
    }

    /**
     * Metodo que valida descuento.
     *
     * @return true si el descuento es correcto, false en caso contrario.
     */
    private boolean validarDescuento() {
        String valida = this.jTextFieldDescuento.getText();
        if (valida.equalsIgnoreCase("-0") || valida.length() == 0) {
            this.jTextFieldDescuento.setText("0");
            return false;
        }
        if (this.validarDobles(valida)) {
            Double descuentoTexto = null;
            try {
                descuentoTexto = new Double(valida);
            } catch (NumberFormatException e) {
            }
            if (descuentoTexto != null) {
                if (descuentoTexto > 100) {
                    JOptionPane.showMessageDialog(this, "El descuento es inválido este no debe de superar el 100%.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    return true;
                }
            }
        } else if (this.validaEntero(valida)) {
            Integer descuentoTexto = null;
            try {
                descuentoTexto = Integer.parseInt(valida);
            } catch (NumberFormatException e) {
            }
            if (descuentoTexto != null) {
                if (descuentoTexto > 100) {
                    JOptionPane.showMessageDialog(this, "El descuento es inválido este no debe de superar el 100%.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    return true;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "El descuento es inválido.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo que realiza el calculo total de la venta.
     */
    private void calcularTotal() {

        String descuentoActual = this.jTextFieldDescuento.getText();

        if (descuentoActual.length() == 0) {
            this.jTextFieldSubtotalRespuesta.setText(String.valueOf(subtotal));
            this.jTextFieldDescuento.setText("0");
            this.jTextFieldTotalRespuesta.setText(String.valueOf(subtotal));
            return;
        }
        if (this.validarDescuento()) {
            return;
        }
        Double descuentoTexto = null;
        try {
            descuentoTexto = Double.parseDouble(descuentoActual);
        } catch (NumberFormatException e) {

        }
        if (descuentoTexto != null) {
            this.jTextFieldSubtotalRespuesta.setText(String.valueOf(subtotal));
            double totalF = subtotal - ((descuentoTexto / 100) * subtotal);
            this.jTextFieldTotalRespuesta.setText(String.valueOf(totalF));
        }
    }

    /**
     * Metodo para obtener el producto selecionado de la tabla de buscados.
     *
     * @return El producto seleccionado.
     */
    private Producto getProductoSeleccionadoBuscados() {
        int indiceFilaSe = this.jTableProductosB.getSelectedRow();
        if (indiceFilaSe != -1) {
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableProductosB.getModel();
            Long id = (Long) modeloTabla.getValueAt(indiceFilaSe, 0);
            String nombre = (String) modeloTabla.getValueAt(indiceFilaSe, 1);
            Float nombreProducto = (Float) modeloTabla.getValueAt(indiceFilaSe, 2);
            Integer stock = (Integer) modeloTabla.getValueAt(indiceFilaSe, 3);
            return new Producto(id, nombre, nombreProducto, stock);
        } else {
            return null;
        }
    }

    /**
     * Metodo que obtiene el producto de la tabla de la lista de productos a
     * comprar..
     *
     * @return El producto de la tabla.
     */
    private Producto getProductoSeleccionadoEliminados() {
        int indiceFilaSe = this.jTableProductosS.getSelectedRow();
        if (indiceFilaSe != -1) {
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableProductosS.getModel();
            Long id = (Long) modeloTabla.getValueAt(indiceFilaSe, 0);
            return new Producto(id);
        } else {
            return null;
        }
    }

    public void restablecerCampos() {
        subtotal = 0;
        contador = 0;
        auxiliarProductos = new ArrayList<>();
        auxiliarCantidad = new ArrayList<>();
        this.jComboBoxCliente.setSelectedIndex(0);
        this.jTextFieldSubtotalRespuesta.setText("");
        this.jTextFieldTotalRespuesta.setText("");
        this.jTextFieldDescuento.setText("");
        this.jTextFieldBuscador.setText("");
        DefaultTableModel modeloTabla1 = (DefaultTableModel) this.jTableProductosB.getModel();
        modeloTabla1.setRowCount(0);
        DefaultTableModel modeloTabla2 = (DefaultTableModel) this.jTableProductosS.getModel();
        modeloTabla2.setRowCount(0);
    }

    /**
     * Metodo que rrelna las tablas de productos en base adiferentes aspectos.
     *
     * @param operación 1=Todos los productos con stock mayor a 0. 2=Productos
     * en base al id y que sea mayor a cero.3=Productos que coincidan con el
     * nombre.
     * @param idProductoB ID del producto.
     * @param nombre Nombre a buscar.
     */
    private void llenarTablablas(int operacion, Long idProductoB, String nombre) {
        List<Producto> listaProductosBuscados = null;

        if (operacion == 1 || operacion == 3) {
            if (operacion == 1) {
                listaProductosBuscados = this.productosDAO.consultarTodos(2);
            }
            if (operacion == 3) {
                listaProductosBuscados = this.productosDAO.consultarProductosNombre(nombre);
            }
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableProductosB.getModel();
            modeloTabla.setRowCount(0);
            listaProductosBuscados.forEach(producto -> {
                Object[] fila = new Object[4];
                fila[0] = producto.getId();
                fila[1] = producto.getNombre();
                fila[2] = producto.getPrecioActual();
                fila[3] = producto.getStock();
                modeloTabla.addRow(fila);
            });
        }
        if (operacion == 2) {
            Producto producto = this.productosDAO.consultar(2, idProductoB);
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableProductosB.getModel();
            modeloTabla.setRowCount(0);
            Object[] fila = new Object[4];
            fila[0] = producto.getId();
            fila[1] = producto.getNombre();
            fila[2] = producto.getPrecioActual();
            fila[3] = producto.getStock();
            modeloTabla.addRow(fila);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonRegistrar;
    private javax.swing.JComboBox<String> jComboBoxCliente;
    private javax.swing.JLabel jLabelBuscador;
    private javax.swing.JLabel jLabelCliente;
    private javax.swing.JLabel jLabelDescuento;
    private javax.swing.JLabel jLabelDetalles;
    private javax.swing.JLabel jLabelDetalles1;
    private javax.swing.JLabel jLabelDetalles2;
    private javax.swing.JLabel jLabelDetalles3;
    private javax.swing.JLabel jLabelProductosSelccionados;
    private javax.swing.JLabel jLabelSubtotal;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JPanel jPanelBuscador;
    private javax.swing.JPanel jPanelBuscadorP;
    private javax.swing.JPanel jPanelSelecciónP;
    private javax.swing.JScrollPane jScrollPaneProductosB;
    private javax.swing.JScrollPane jScrollPaneProductosS;
    private javax.swing.JTable jTableProductosB;
    private javax.swing.JTable jTableProductosS;
    private javax.swing.JTextField jTextFieldBuscador;
    private javax.swing.JTextField jTextFieldDescuento;
    private javax.swing.JTextField jTextFieldSubtotalRespuesta;
    private javax.swing.JTextField jTextFieldTotalRespuesta;
    // End of variables declaration//GEN-END:variables
}

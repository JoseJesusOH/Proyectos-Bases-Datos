package formularios;

import entidades.Producto;
import guis.utils.JButtonCellEditor;
import guis.utils.JButtonRenderer;
import interfaces.IProductosDAO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * Form de productos.
 *
 * @author Luis Gonzalo y José Jesús.
 */
public class ProductosForm extends javax.swing.JFrame {

    /**
     * Axuliar producto eliminado.
     */
    private int auxiliar;
    /**
     * Axuliar id producto a aliminar-
     */
    private Long idProducto;

    /**
     * Constructor del Form Clientes
     *
     * @param productosDAO
     */
    public ProductosForm(IProductosDAO productosDAO) {
        initComponents();
        this.auxiliar = -1;
        this.idProducto = null;
        this.productosDAO = productosDAO;
        this.initTablaProductos();
        this.llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBuscador = new javax.swing.JPanel();
        lblIDProducto = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        lblStock = new javax.swing.JLabel();
        campoTextoIDProducto = new javax.swing.JTextField();
        campoTextoNombre = new javax.swing.JTextField();
        campoTextoPrecio = new javax.swing.JTextField();
        campoTextoStock = new javax.swing.JTextField();
        botonGuardar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();
        lblProductos = new javax.swing.JLabel();
        panel1 = new javax.swing.JPanel();
        lblProductosActuales = new javax.swing.JLabel();
        panelTablaProductos = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Productos");
        setPreferredSize(new java.awt.Dimension(1030, 450));
        setResizable(false);
        getContentPane().setLayout(null);

        panelBuscador.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelBuscador.setLayout(null);

        lblIDProducto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblIDProducto.setText("ID Producto");
        panelBuscador.add(lblIDProducto);
        lblIDProducto.setBounds(20, 70, 90, 30);

        lblNombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNombre.setText("Nombre");
        panelBuscador.add(lblNombre);
        lblNombre.setBounds(20, 120, 80, 30);

        lblPrecio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPrecio.setText("Precio");
        panelBuscador.add(lblPrecio);
        lblPrecio.setBounds(20, 170, 80, 30);

        lblStock.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStock.setText("Stock");
        panelBuscador.add(lblStock);
        lblStock.setBounds(20, 220, 80, 30);

        campoTextoIDProducto.setEnabled(false);
        panelBuscador.add(campoTextoIDProducto);
        campoTextoIDProducto.setBounds(120, 70, 200, 30);
        panelBuscador.add(campoTextoNombre);
        campoTextoNombre.setBounds(120, 120, 200, 30);
        panelBuscador.add(campoTextoPrecio);
        campoTextoPrecio.setBounds(120, 170, 200, 30);
        panelBuscador.add(campoTextoStock);
        campoTextoStock.setBounds(120, 220, 200, 30);

        botonGuardar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botonGuardar.setText("Guardar");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        panelBuscador.add(botonGuardar);
        botonGuardar.setBounds(50, 330, 100, 30);

        botonCancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });
        panelBuscador.add(botonCancelar);
        botonCancelar.setBounds(190, 330, 100, 30);

        lblProductos.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblProductos.setText("Productos");
        panelBuscador.add(lblProductos);
        lblProductos.setBounds(20, 20, 170, 22);

        getContentPane().add(panelBuscador);
        panelBuscador.setBounds(10, 10, 330, 380);

        panel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel1.setLayout(null);

        lblProductosActuales.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblProductosActuales.setText("Productos Actuales");
        panel1.add(lblProductosActuales);
        lblProductosActuales.setBounds(10, 10, 190, 50);

        tablaProductos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Producto", "Nombre", "Precio actual", "Stock", "Editar", "Eliminar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProductos.setCellSelectionEnabled(true);
        tablaProductos.getTableHeader().setReorderingAllowed(false);
        tablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductosMouseClicked(evt);
            }
        });
        panelTablaProductos.setViewportView(tablaProductos);

        panel1.add(panelTablaProductos);
        panelTablaProductos.setBounds(20, 70, 610, 230);

        getContentPane().add(panel1);
        panel1.setBounds(340, 10, 660, 380);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Evento del boton guardar.
     *
     * @param evt Evento.
     */
    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_botonGuardarActionPerformed
    /**
     * Evento del boton cancelar.
     *
     * @param evt Evento.
     */
    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_botonCancelarActionPerformed

    /**
     * Evento mouse clicked de la tabla productos que determina si existe algun
     * producto a eliminar
     *
     * @param evt Evento.
     */
    private void tablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosMouseClicked
        if (auxiliar == 1) {
            this.eliminar(idProducto);
        }
        auxiliar = -1;
        idProducto = null;
    }//GEN-LAST:event_tablaProductosMouseClicked

    /**
     * Metodo que valida si la cadena es un entero.
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validaEntero(String s) {
        CharSequence cadena = s.trim();
        String reCadena = "^\\d+$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que valida si la cadena es doble.
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validarDobles(String as) {
        CharSequence cadena = as.trim();
        String reCadena = "^[0-9]+([.][0-9]+)?$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que valida si los campos de texto se encuentran vacios.
     *
     * @return true si existe algun campo vacio, false en caso contrario.
     */
    private boolean verificarDatosVacios() {
        if (this.campoTextoNombre.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el nombre antes de guardar/actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.campoTextoPrecio.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el precio antes de guardar/actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.campoTextoStock.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el stock(cantidad) antes de guardar/actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo que verifica la cantidad de texto ingresado en los campo de texto.
     *
     * @return true si algun campo sobrepasa el limite, false en caso contrario.
     */
    private boolean verificarCantidadTamanho() {
        String nombre = this.campoTextoNombre.getText();
        String precio = this.campoTextoPrecio.getText();
        String stock = this.campoTextoStock.getText();
        if (nombre.length() > 100) {
            JOptionPane.showMessageDialog(this, "El nombre es demasiado largo, máximo 100 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        Float b = new Float(1000000);
        float a = 0;
        try {
            a = new Float(precio);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "El precio contiene caracteres inválidos.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (a >= b) {
            JOptionPane.showMessageDialog(this, "El precio es demasiado grande.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        Integer f = 100000000;
        int l=0;
        try {
            l=Integer.parseInt(stock);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El stock es demasiado grande.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (l >= f) {
            JOptionPane.showMessageDialog(this, "El stock es demasiado grande.", "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }

        return false;
    }

    /**
     * MEtodo que verifica precio y stock ingresado.
     *
     * @return true si supera los limites, false en caso contrario.
     */
    private boolean verificarNumeros() {
        String precio = this.campoTextoPrecio.getText();
        String stock = this.campoTextoStock.getText();
        if (!this.validaEntero(stock)) {
            JOptionPane.showMessageDialog(this, "Solo se aceptan dígitos positivos, o el numero 0.", "Error en stock", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (!this.validarDobles(precio)) {
            Float a = null;
            try {
                a = Float.parseFloat(precio);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El precio contiene caracteres invalidos.", "Error", JOptionPane.ERROR_MESSAGE);
                return true;
            }
            if (a != null && a == 0) {
                JOptionPane.showMessageDialog(this, "El precio del producto no debe de ser 0.", "Error", JOptionPane.ERROR_MESSAGE);
                return true;
            } else {
                JOptionPane.showMessageDialog(this, "El precio del producto no debe de ser menor 0.", "Error", JOptionPane.ERROR_MESSAGE);
                return true;
            }
        }
        return false;
    }

    /**
     * Metodo auxiliar que guarda o actualiza un producto.
     */
    private void guardar() {
        if (this.campoTextoIDProducto.getText().isEmpty()) {
            this.agregar();
        } else {
            this.actualizar();
        }
    }

    /**
     * Metodo axuliar que nos ayuda a agregar un producto.
     */
    private void agregar() {
        if (this.verificarDatosVacios()) {
            return;
        }
        if (this.verificarNumeros()) {
            return;
        }
        if (this.verificarCantidadTamanho()) {
            return;
        }

        String nombre = this.campoTextoNombre.getText();
        String precio = this.campoTextoPrecio.getText();
        String stock = this.campoTextoStock.getText();
        Producto producto = new Producto(nombre, Float.valueOf(precio), Integer.valueOf(stock));

        if (producto.getPrecioActual() == 0) {
            JOptionPane.showMessageDialog(this, "El producto debe de tener un precio, no debe de ser 0.", "Error en stock", JOptionPane.ERROR_MESSAGE);
            return;
        }
        boolean seAgregoProducto = this.productosDAO.agregar(producto);
        if (seAgregoProducto) {
            JOptionPane.showMessageDialog(this, "Se agregó el producto.", "Información", JOptionPane.INFORMATION_MESSAGE);
            this.limpiar();
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo agregar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metodo auxiliar para editar un producto.
     *
     * @param idProducto ID del producto a actualizar.
     */
    private void editar(Long idProducto) {
        Producto p = this.productosDAO.consultar(1, idProducto);
        this.llenarFormulario(p);
    }

    /**
     * Metodo axuliar que nos ayuda eliminar producto.
     *
     * @param idProducto Id del producto a eliminar.
     */
    private void eliminar(Long idProducto) {
        int opcionSelecionada = JOptionPane.showConfirmDialog(this, "¿Estás seguro de eliminar el producto?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcionSelecionada == JOptionPane.YES_OPTION) {
            boolean seEliminoProducto = this.productosDAO.eliminar(idProducto);
            if (seEliminoProducto) {
                JOptionPane.showMessageDialog(this, "Se eliminó el producto", "Información", JOptionPane.INFORMATION_MESSAGE);
                this.llenarTabla();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el poducto, este está relacionado con una venta y detalle de venta. Si desea eliminarlo por favor elimine los registros mencionados.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Metodo axuliar que nos ayuda a actualizar un determinado producto.
     */
    private void actualizar() {
        Long idProductoD = Long.valueOf(this.campoTextoIDProducto.getText());

        if (this.verificarDatosVacios()) {
            return;
        }
        if (this.verificarCantidadTamanho()) {
            return;
        }
        if (this.verificarNumeros()) {
            return;
        }

        String nombre = this.campoTextoNombre.getText();
        String precio = this.campoTextoPrecio.getText();
        String stock = this.campoTextoStock.getText();
        Producto producto = new Producto(idProductoD, nombre, Float.valueOf(precio), Integer.valueOf(stock));
        boolean seActualizoProducto = this.productosDAO.actualizar(producto);
        if (seActualizoProducto) {
            JOptionPane.showMessageDialog(this, "Se actualizó el producto.", "Información", JOptionPane.INFORMATION_MESSAGE);
            this.limpiar();
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metodo que rellena el formulario en base al producto.
     *
     * @param producto Producto.
     */
    private void llenarFormulario(Producto producto) {
        this.campoTextoIDProducto.setText(String.valueOf(producto.getId()));
        this.campoTextoNombre.setText(producto.getNombre());
        this.campoTextoPrecio.setText(String.valueOf(producto.getPrecioActual()));
        this.campoTextoStock.setText(String.valueOf(producto.getStock()));
    }

    /**
     * Metodo que establecer los campos de texto a nada.
     */
    private void limpiar() {
        this.campoTextoIDProducto.setText("");
        this.campoTextoNombre.setText("");
        this.campoTextoPrecio.setText("");
        this.campoTextoStock.setText("");
    }

    /**
     * Metodo que rellena la tabla de productos.
     */
    private void llenarTabla() {
        List<Producto> listaProductos = this.productosDAO.consultarTodos(1);
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaProductos.getModel();
        modeloTabla.setRowCount(0);
        listaProductos.forEach(producto -> {
            Object[] fila = new Object[6];
            fila[0] = producto.getId();
            fila[1] = producto.getNombre();
            fila[2] = producto.getPrecioActual();
            fila[3] = producto.getStock();
            fila[4] = "Editar";
            fila[5] = "Eliminar";
            modeloTabla.addRow(fila);
        });
    }

    /**
     * Metodo de apoyo.
     */
    private void initTablaProductos() {
        ActionListener onEditarProductoClickListener = new ActionListener() {
            final int columnaId = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                int filaSeleccionada = tablaProductos.getSelectedRow();
                Long idProducto = (Long) tablaProductos.getValueAt(filaSeleccionada, columnaId);
                editar(idProducto);
            }
        };
        ActionListener onEliminarProductoClickListener = new ActionListener() {
            final int columnaId = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                auxiliar = 1;
                int filaSelecionada = tablaProductos.getSelectedRow();
                idProducto = (Long) tablaProductos.getValueAt(filaSelecionada, columnaId);
            }
        };
        int indiceColumnaEditar = 4;
        TableColumnModel modeloColumnas = this.tablaProductos.getColumnModel();
        modeloColumnas.getColumn(indiceColumnaEditar).setCellRenderer(new JButtonRenderer("Editar"));
        modeloColumnas.getColumn(indiceColumnaEditar).setCellEditor(new JButtonCellEditor(new JTextField(), onEditarProductoClickListener));
        int indiceColumnaEliminar = 5;
        modeloColumnas.getColumn(indiceColumnaEliminar).setCellRenderer(new JButtonRenderer("Eliminar"));
        modeloColumnas.getColumn(indiceColumnaEliminar).setCellEditor(new JButtonCellEditor(new JTextField(), onEliminarProductoClickListener));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JTextField campoTextoIDProducto;
    private javax.swing.JTextField campoTextoNombre;
    private javax.swing.JTextField campoTextoPrecio;
    private javax.swing.JTextField campoTextoStock;
    private javax.swing.JLabel lblIDProducto;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblProductos;
    private javax.swing.JLabel lblProductosActuales;
    private javax.swing.JLabel lblStock;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panelBuscador;
    private javax.swing.JScrollPane panelTablaProductos;
    private javax.swing.JTable tablaProductos;
    // End of variables declaration//GEN-END:variables
    private final IProductosDAO productosDAO;
}

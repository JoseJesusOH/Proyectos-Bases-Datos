package guis;

import entidades.Cliente;
import entidades.Evento;
import entidades.Lugar;
import java.sql.Date;
import java.sql.Time;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.IClienteDAO;
import persistencia.IEventoDAO;
import persistencia.ILugarDAO;

/**
 * Form del evento.
 *
 * @author José Jesús Orozco Hernández ID; 00000229141
 */
public class EventosForm extends javax.swing.JFrame {

    /**
     * Conexion a eventoDAO
     */
    private final IEventoDAO eventoDAO;
    /**
     * Conexion a clienteDAO
     */
    private final IClienteDAO clienteDAO;
    /**
     * Conexion a lugarDAO
     */
    private final ILugarDAO lugarDAO;
    /**
     * Lista de lugares
     */
    private final List<Lugar> listaLugares;
    /**
     * Lista de clientes
     */
    private final List<Cliente> listaClientes;

    /**
     * Constructor del form de evento.
     *
     * @param eventoDAO Conexion a eventoDAO
     * @param clienteDAO Conexion a clienteDAO
     * @param lugarDAO Conexion a lugarDAO
     */
    public EventosForm(IEventoDAO eventoDAO, IClienteDAO clienteDAO, ILugarDAO lugarDAO) {
        initComponents();
        this.eventoDAO = eventoDAO;
        this.clienteDAO = clienteDAO;
        this.lugarDAO = lugarDAO;
        this.listaLugares = this.lugarDAO.consultarTodos();
        this.listaClientes = this.clienteDAO.consultarTodos();
        this.jDateChooser1.getDateEditor().setEnabled(false);
        if (listaLugares.isEmpty() || listaClientes.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Imposible agregar eventos faltan clientes o lugares para completar la operacion",
                    "Error bloqueo de funciones", JOptionPane.ERROR_MESSAGE);
            jButtonGuardar.setEnabled(false);
            jButtonCancelar.setEnabled(false);
            jButtonBuscar.setEnabled(false);
            jButtonEditar1.setEnabled(false);
            jButtonEliminar.setEnabled(false);
            jComboBoxClientes.setEnabled(false);
            jComboBoxLugares.setEnabled(false);
            jDateChooser1.setEnabled(false);
        } else {
            for (int i = 0; i < listaLugares.size(); i++) {
                Lugar lugar = listaLugares.get(i);
                jComboBoxLugares.addItem(lugar.getIdLugar() + " - " + lugar.getNombre());
            }
            for (int i = 0; i < listaClientes.size(); i++) {
                Cliente cliente = listaClientes.get(i);
                jComboBoxClientes.addItem(cliente.getIdCliente() + " - " + cliente.getNombre());
            }
        }
        this.llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelLugar = new javax.swing.JLabel();
        jTextFieldIDEvento = new javax.swing.JTextField();
        jTextFieldNombre = new javax.swing.JTextField();
        jTextFieldBuscarID = new javax.swing.JTextField();
        jButtonGuardar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        tablaSocios = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEventos = new javax.swing.JTable();
        jButtonBuscar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jLabelIDEvento = new javax.swing.JLabel();
        jLabelHora = new javax.swing.JLabel();
        jLabelNumeroAsistentes = new javax.swing.JLabel();
        jTextFieldNumeroAsistentes = new javax.swing.JTextField();
        jButtonEditar1 = new javax.swing.JButton();
        jLabelCliente = new javax.swing.JLabel();
        jComboBoxLugares = new javax.swing.JComboBox<>();
        jLabelNombre = new javax.swing.JLabel();
        jComboBoxClientes = new javax.swing.JComboBox<>();
        jLabelFecha = new javax.swing.JLabel();
        jTextFieldHora = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administracion de Eventos");
        setMaximumSize(new java.awt.Dimension(900, 400));
        setMinimumSize(new java.awt.Dimension(900, 400));
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 700));
        getContentPane().setLayout(null);

        jLabelLugar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelLugar.setText("Lugar;");
        getContentPane().add(jLabelLugar);
        jLabelLugar.setBounds(10, 260, 100, 30);

        jTextFieldIDEvento.setEditable(false);
        getContentPane().add(jTextFieldIDEvento);
        jTextFieldIDEvento.setBounds(130, 20, 70, 30);
        getContentPane().add(jTextFieldNombre);
        jTextFieldNombre.setBounds(130, 60, 140, 30);
        getContentPane().add(jTextFieldBuscarID);
        jTextFieldBuscarID.setBounds(290, 20, 350, 30);

        jButtonGuardar.setBackground(new java.awt.Color(0, 255, 255));
        jButtonGuardar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGuardar);
        jButtonGuardar.setBounds(10, 310, 120, 40);

        jButtonCancelar.setBackground(new java.awt.Color(51, 255, 255));
        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCancelar);
        jButtonCancelar.setBounds(150, 310, 120, 40);

        jTableEventos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableEventos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Evento", "Nombre", "Fecha", "Hora", "Asistentes", "Cliente", "Lugar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEventos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableEventos);

        tablaSocios.add(jScrollPane1);

        getContentPane().add(tablaSocios);
        tablaSocios.setBounds(290, 60, 450, 300);

        jButtonBuscar.setBackground(new java.awt.Color(102, 255, 255));
        jButtonBuscar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonBuscar);
        jButtonBuscar.setBounds(640, 20, 100, 30);

        jButtonEliminar.setBackground(new java.awt.Color(102, 255, 255));
        jButtonEliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEliminar);
        jButtonEliminar.setBounds(760, 110, 100, 30);

        jLabelIDEvento.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelIDEvento.setText("ID Evento;");
        getContentPane().add(jLabelIDEvento);
        jLabelIDEvento.setBounds(10, 20, 100, 30);

        jLabelHora.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelHora.setText("Hora;");
        getContentPane().add(jLabelHora);
        jLabelHora.setBounds(10, 140, 90, 30);

        jLabelNumeroAsistentes.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelNumeroAsistentes.setText("# Asistentes;");
        getContentPane().add(jLabelNumeroAsistentes);
        jLabelNumeroAsistentes.setBounds(10, 180, 120, 30);
        getContentPane().add(jTextFieldNumeroAsistentes);
        jTextFieldNumeroAsistentes.setBounds(130, 180, 140, 30);

        jButtonEditar1.setBackground(new java.awt.Color(102, 255, 255));
        jButtonEditar1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonEditar1.setText("Editar");
        jButtonEditar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditar1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEditar1);
        jButtonEditar1.setBounds(760, 70, 100, 30);

        jLabelCliente.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelCliente.setText("Cliente;");
        getContentPane().add(jLabelCliente);
        jLabelCliente.setBounds(10, 220, 100, 30);

        jComboBoxLugares.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(jComboBoxLugares);
        jComboBoxLugares.setBounds(130, 260, 140, 30);

        jLabelNombre.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelNombre.setText("Nombre;");
        getContentPane().add(jLabelNombre);
        jLabelNombre.setBounds(10, 60, 90, 30);

        jComboBoxClientes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(jComboBoxClientes);
        jComboBoxClientes.setBounds(130, 220, 140, 30);

        jLabelFecha.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelFecha.setText("Fecha;");
        getContentPane().add(jLabelFecha);
        jLabelFecha.setBounds(10, 100, 90, 30);
        getContentPane().add(jTextFieldHora);
        jTextFieldHora.setBounds(130, 140, 140, 30);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Evento del boton guardar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_jButtonGuardarActionPerformed
    /**
     * Evento del boton cancelar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jButtonCancelarActionPerformed
    /**
     * Evento del boton buscar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        this.buscar();
    }//GEN-LAST:event_jButtonBuscarActionPerformed
    /**
     * Evento del boton editar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonEditar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditar1ActionPerformed
        this.editar();
    }//GEN-LAST:event_jButtonEditar1ActionPerformed
    /**
     * Evento del boton eliminar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jButtonEliminarActionPerformed
    /**
     * Metodo que busca un evento y rellena los datos.
     */
    private void buscar() {
        if (jTextFieldBuscarID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se pudo buscar el evento",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String numero = jTextFieldBuscarID.getText();
            if (!validaEntero(numero)) {
                JOptionPane.showMessageDialog(this, "Porfavor solo escriba numeros el id del evento es un numero",
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (numero.length() > 10) {
                    JOptionPane.showMessageDialog(this, "El maximo numero permitido de caracteres es 10, ejemplo 1234567890",
                            "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    Evento evento = this.eventoDAO.consultar(Integer.valueOf(numero));
                    if (evento != null) {
                        this.llenarFormulario(evento);
                    }
                }
            }
        }
        this.jTextFieldBuscarID.setText("");
    }

    /**
     * Metodo que guarda o actualiza un evento.
     */
    private void guardar() {
        if (this.jTextFieldIDEvento.getText().isEmpty()) {
            this.agregar();
        } else {
            this.actualizar();
        }
    }

    /**
     * Metodo que actualiza un evento.
     */
    private void actualizar() {
        Integer idEvento = Integer.valueOf(this.jTextFieldIDEvento.getText());
        //Verificar todos los datos
        if (this.verificarDatosVacios()) {
            return;
        }

        if (this.verificarDatos()) {
            return;
        }

        String nombre = this.jTextFieldNombre.getText();
        int dia = this.jDateChooser1.getDate().getDate();
        int mes = this.jDateChooser1.getDate().getMonth();
        int anho = this.jDateChooser1.getDate().getYear();
        Date fechaHora = new Date(anho, mes, dia);
        Time hora = new Time(0, 0, 0);
        this.separarHora(hora, jTextFieldHora.getText());
        Integer numeroAsistentes = Integer.valueOf(this.jTextFieldNumeroAsistentes.getText());
        int indiceComboBoxClientes = this.jComboBoxClientes.getSelectedIndex();
        int idClienteAuxiliar = listaClientes.get(indiceComboBoxClientes).getIdCliente();
        Integer idCliente = idClienteAuxiliar;
        int indiceComboBoxLugares = this.jComboBoxLugares.getSelectedIndex();
        int idLugarAuxiliar = listaLugares.get(indiceComboBoxLugares).getIdLugar();
        Integer idLugar = idLugarAuxiliar;
        Evento evento = new Evento(idEvento, nombre, (java.sql.Date) fechaHora, hora, numeroAsistentes, idCliente, idLugar);
        boolean seActualizoEvento = this.eventoDAO.actualizar(evento);
        if (seActualizoEvento) {
            JOptionPane.showMessageDialog(this, "Se actualizo el evento",
                    "Informacion", JOptionPane.INFORMATION_MESSAGE);
            this.limpiar();
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el evento",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metodo que valida el formato de una cadena y si este coincide con una
     * hora en formato HH:MM
     *
     * @param s Cadena a evaluar
     * @return true si esta cumlpe,false en caso contrario
     */
    private boolean validarHora(String s) {
        CharSequence cadena = s.trim();
        String reCadena = "^([01]?[0-9]|2[0-3]):[0-5][0-9]$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que valida si la cadena es un entero.
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validaEntero(String s) {
        CharSequence cadena = s.trim();
        String reCadena = "^\\d+$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que valida si la cadena es un doble
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validarDobles(String as) {
        CharSequence cadena = as.trim();
        String reCadena = "^[0-9]+([.][0-9]+)?$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que evalua si los datos como nombre,numero de asistentes, hora, y
     * fecha no estan vacios o seleccionados.
     *
     * @return true si estos no cumplen, false en caso contrario
     */
    private boolean verificarDatosVacios() {
        if (this.jTextFieldNombre.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el nombre antes de guardar/actualizar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.jTextFieldNumeroAsistentes.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir los numeros de asistentes antes de guardar/actualizar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.jTextFieldHora.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir la hora antes guardar/actualizar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.jDateChooser1.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Es necesario seleccionar la fecha antes guardar/actualizar.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo para evluar daos generales como tamaño,si es doble,o si cumple con
     * la hora.
     *
     * @return true si estos no cumplen, false en caso contrario
     */
    private boolean verificarDatos() {
        String nombre = this.jTextFieldNombre.getText();
        String numeroAsistentes = this.jTextFieldNumeroAsistentes.getText();
        String hora = this.jTextFieldHora.getText();
        if (nombre.length() > 100) {
            JOptionPane.showMessageDialog(this, "El nombre es demasiado largo, maximo 100 caracteres.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (!this.validarDobles(numeroAsistentes)) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir valores enteros, el numero de asistentes deben de ser numeros.",
                    "Error no Aceptable", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (numeroAsistentes.length() > 10) {
            JOptionPane.showMessageDialog(this, "El maximo numero permitido de caracteres es 10, ejemplo 1234567890",
                    "Error numero de asistentes", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (!validarHora(hora)) {
            JOptionPane.showMessageDialog(this, "Hora invalida el formato debe de ser HH:MM,ejemplo 15:35.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo que sirve para separ la hora que se encuentra en un formato de
     * cadena.
     *
     * @param horaT Time de la hora
     * @param horaString La hora en un formato de cadena
     */
    public void separarHora(Time horaT, String horaString) {
        int a = 0;
        int auxiliar = 1;
        String hora = "";
        String minutos = "";
        int horaOficial = 0;
        int minutosOficial = 0;
        char array_caracteres[] = horaString.toCharArray();

        while (a < horaString.length()) {
            if (auxiliar == 1) {
                if (Character.isDigit(array_caracteres[a])) {
                    hora += array_caracteres[a];
                } else {
                    a++;
                    auxiliar = 2;
                }
            }
            if (auxiliar == 2) {
                if (Character.isDigit(array_caracteres[a])) {
                    minutos += array_caracteres[a];
                } else {
                    a++;
                    auxiliar = 3;
                }
            }
            a++;
        }
        horaOficial = Integer.valueOf(hora);
        minutosOficial = Integer.valueOf(minutos);
        horaT.setHours(horaOficial);
        horaT.setMinutes(minutosOficial);
    }

    /**
     * Metodo para agregar un evento
     */
    private void agregar() {
        if (this.verificarDatosVacios()) {
            return;
        }

        if (this.verificarDatos()) {
            return;
        }

        String nombre = this.jTextFieldNombre.getText();
        int dia = this.jDateChooser1.getDate().getDate();
        int mes = this.jDateChooser1.getDate().getMonth();
        int anho = this.jDateChooser1.getDate().getYear();
        Date fechaHora = new Date(anho, mes, dia);
        Time hora = new Time(0, 0, 0);
        this.separarHora(hora, jTextFieldHora.getText());
        Integer numeroAsistentes = Integer.valueOf(this.jTextFieldNumeroAsistentes.getText());
        int indiceComboBoxClientes = this.jComboBoxClientes.getSelectedIndex();
        int idClienteAuxiliar = listaClientes.get(indiceComboBoxClientes).getIdCliente();
        Integer idCliente = idClienteAuxiliar;
        int indiceComboBoxLugares = this.jComboBoxLugares.getSelectedIndex();
        int idLugarAuxiliar = listaLugares.get(indiceComboBoxLugares).getIdLugar();
        Integer idLugar = idLugarAuxiliar;
        Evento evento = new Evento(nombre, (java.sql.Date) fechaHora, hora, numeroAsistentes, idCliente, idLugar);
        boolean seAgregoEvento = this.eventoDAO.agregar(evento);
        if (seAgregoEvento) {
            JOptionPane.showMessageDialog(this, "Se agrego el evento",
                    "Informacion", JOptionPane.INFORMATION_MESSAGE);
            this.limpiar();
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo agregar el evento",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Metodo que rellena los datos de un evento en los campos de texto.
     *
     * @param evento Evento a extraer datos.
     */
    public void llenarFormulario(Evento evento) {
        this.jTextFieldIDEvento.setText(String.valueOf(evento.getIdEvento()));
        this.jTextFieldNombre.setText(evento.getNombre());
        this.jTextFieldNumeroAsistentes.setText(String.valueOf(evento.getNumeroAsistentes()));
        this.jDateChooser1.setDate(evento.getFechaHora());
        if (evento.getHora().getMinutes() == 0) {
            this.jTextFieldHora.setText(evento.getHora().getHours() + ":" + evento.getHora().getMinutes() + "0");
        } else {
            this.jTextFieldHora.setText(evento.getHora().getHours() + ":" + evento.getHora().getMinutes());
        }
        this.jComboBoxClientes.setSelectedIndex(listaClientes.indexOf(new Cliente(evento.getIdCliente())));
        this.jComboBoxLugares.setSelectedIndex(listaLugares.indexOf(new Lugar(evento.getIdLugar())));
    }

    /**
     * Metodo que limpia los campos de texto del formulario.
     */
    private void limpiar() {
        this.jTextFieldIDEvento.setText("");
        this.jTextFieldNombre.setText("");
        this.jDateChooser1.setDate(null);
        this.jTextFieldHora.setText("");
        this.jTextFieldNumeroAsistentes.setText("");
        this.jComboBoxClientes.setSelectedIndex(0);
        this.jComboBoxLugares.setSelectedIndex(0);
        this.jTextFieldBuscarID.setText("");

    }

    /**
     * Metodo que edita un evento.
     */
    private void editar() {
        Integer idEventoEditar = this.getIdEventoSeleccionado();
        if (idEventoEditar == null) {
            JOptionPane.showMessageDialog(this, "Debes de seleccionar un evento para poder editarlo",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Evento evento = this.eventoDAO.consultar(idEventoEditar);
        if (evento != null) {
            this.llenarFormulario(evento);
        }
    }

    /**
     * Metodo que elimina un evento
     */
    private void eliminar() {
        Integer idEventoEliminar = this.getIdEventoSeleccionado();
        if (idEventoEliminar == null) {
            JOptionPane.showMessageDialog(this, "Debes de seleccionar un evento para eliminarlo",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int opcionSelecionada = JOptionPane.showConfirmDialog(this, "Estas Seguro de eliminar el evento", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcionSelecionada == JOptionPane.NO_OPTION) {
            return;
        }
        boolean seEliminoEvento = this.eventoDAO.eliminar(idEventoEliminar);
        if (seEliminoEvento) {
            JOptionPane.showMessageDialog(this, "Se elimino el evento",
                    "Informacion", JOptionPane.INFORMATION_MESSAGE);
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo eliminar el evento",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metodo que obtiene el ID del evento
     *
     * @return El ID del evento
     */
    private Integer getIdEventoSeleccionado() {
        int indiceFilaSe = this.jTableEventos.getSelectedRow();
        if (indiceFilaSe != -1) {
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableEventos.getModel();
            int indiceColumna = 0;
            Integer id = (Integer) modeloTabla.getValueAt(indiceFilaSe, indiceColumna);
            return id;
        } else {
            return null;
        }
    }

    /**
     * Metodo que llena una tabla con todos los eventos actuales
     */
    private void llenarTabla() {
        List<Evento> listaEventos = this.eventoDAO.consultarTodos();
        DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableEventos.getModel();
        modeloTabla.setRowCount(0);
        listaEventos.forEach(evento -> {
            Object[] fila = new Object[7];
            fila[0] = evento.getIdEvento();
            fila[1] = evento.getNombre();
            fila[2] = evento.getFechaHora();
            fila[3] = evento.getHora();
            fila[4] = evento.getNumeroAsistentes();
            fila[5] = evento.getIdCliente() + "-" + evento.getNombreCliente();
            fila[6] = evento.getIdLugar() + "-" + evento.getNombreLugar();
            modeloTabla.addRow(fila);
        }
        );

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEditar1;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JComboBox<String> jComboBoxClientes;
    private javax.swing.JComboBox<String> jComboBoxLugares;
    private javax.swing.JLabel jLabelCliente;
    private javax.swing.JLabel jLabelFecha;
    private javax.swing.JLabel jLabelHora;
    private javax.swing.JLabel jLabelIDEvento;
    private javax.swing.JLabel jLabelLugar;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelNumeroAsistentes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEventos;
    private javax.swing.JTextField jTextFieldBuscarID;
    private javax.swing.JTextField jTextFieldHora;
    private javax.swing.JTextField jTextFieldIDEvento;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldNumeroAsistentes;
    private javax.swing.JPanel tablaSocios;
    // End of variables declaration//GEN-END:variables
}

package guis;

import entidades.Cliente;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.IClienteDAO;

/**
 * Form de Clientes.
 *
 * @author José Jesús Orozco Hernández ID; 00000229141
 */
public class ClientesForm extends javax.swing.JFrame {

    /**
     * Conexion a clienteDAO
     */
    private final IClienteDAO clienteDAO;

    /**
     * Constructor del Form Clientes
     *
     * @param clienteDAO ConexionDAO
     */
    public ClientesForm(IClienteDAO clienteDAO) {
        initComponents();
        this.clienteDAO = clienteDAO;
        this.llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTeléfono = new javax.swing.JLabel();
        jTextFieldIDCliente = new javax.swing.JTextField();
        jTextFieldNombre = new javax.swing.JTextField();
        jTextFieldBuscarID = new javax.swing.JTextField();
        jButtonGuardar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        tablaSocios = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClientes = new javax.swing.JTable();
        jButtonBuscar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jLabelIDCliente = new javax.swing.JLabel();
        jLabelNombre = new javax.swing.JLabel();
        jLabelDireccion = new javax.swing.JLabel();
        jTextFieldDireccion = new javax.swing.JTextField();
        jTextFieldTelefono = new javax.swing.JTextField();
        jButtonEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administracion de Clientes");
        setMaximumSize(new java.awt.Dimension(900, 400));
        setMinimumSize(new java.awt.Dimension(900, 400));
        setName("clientes"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(900, 400));
        getContentPane().setLayout(null);

        jLabelTeléfono.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelTeléfono.setText("Teléfono;");
        getContentPane().add(jLabelTeléfono);
        jLabelTeléfono.setBounds(20, 170, 100, 30);

        jTextFieldIDCliente.setEditable(false);
        getContentPane().add(jTextFieldIDCliente);
        jTextFieldIDCliente.setBounds(130, 20, 80, 30);
        getContentPane().add(jTextFieldNombre);
        jTextFieldNombre.setBounds(130, 70, 150, 30);
        getContentPane().add(jTextFieldBuscarID);
        jTextFieldBuscarID.setBounds(290, 20, 350, 30);

        jButtonGuardar.setBackground(new java.awt.Color(0, 255, 255));
        jButtonGuardar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGuardar);
        jButtonGuardar.setBounds(20, 240, 120, 40);

        jButtonCancelar.setBackground(new java.awt.Color(51, 255, 255));
        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCancelar);
        jButtonCancelar.setBounds(150, 240, 120, 40);

        jTableClientes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Cliente", "Nombre", "Dirección", "Teléfono"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableClientes.setCellSelectionEnabled(true);
        jTableClientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableClientes);

        tablaSocios.add(jScrollPane1);

        getContentPane().add(tablaSocios);
        tablaSocios.setBounds(290, 60, 450, 300);

        jButtonBuscar.setBackground(new java.awt.Color(102, 255, 255));
        jButtonBuscar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonBuscar);
        jButtonBuscar.setBounds(640, 20, 100, 30);

        jButtonEliminar.setBackground(new java.awt.Color(102, 255, 255));
        jButtonEliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEliminar);
        jButtonEliminar.setBounds(760, 120, 100, 30);

        jLabelIDCliente.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelIDCliente.setText("ID Cliente;");
        getContentPane().add(jLabelIDCliente);
        jLabelIDCliente.setBounds(20, 20, 100, 30);

        jLabelNombre.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelNombre.setText("Nombre;");
        getContentPane().add(jLabelNombre);
        jLabelNombre.setBounds(20, 70, 90, 30);

        jLabelDireccion.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelDireccion.setText("Dirección;");
        getContentPane().add(jLabelDireccion);
        jLabelDireccion.setBounds(20, 120, 100, 30);
        getContentPane().add(jTextFieldDireccion);
        jTextFieldDireccion.setBounds(130, 120, 150, 30);
        getContentPane().add(jTextFieldTelefono);
        jTextFieldTelefono.setBounds(130, 170, 150, 30);

        jButtonEditar.setBackground(new java.awt.Color(102, 255, 255));
        jButtonEditar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEditar);
        jButtonEditar.setBounds(760, 69, 100, 31);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Evento del boton guardar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_jButtonGuardarActionPerformed
    /**
     * Evento del boton cancelar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jButtonCancelarActionPerformed
    /**
     * Evento del boton buscar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        this.buscar();
    }//GEN-LAST:event_jButtonBuscarActionPerformed
    /**
     * Evento del boton editar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        this.editar();
    }//GEN-LAST:event_jButtonEditarActionPerformed
    /**
     * Evento del boton eliminar que sucede cuando el usuario da click.
     *
     * @param evt Evento
     */
    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jButtonEliminarActionPerformed
    /**
     * Metodo que busca un cliente y rellena los datos.
     */
    private void buscar() {
        if (jTextFieldBuscarID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se pudo buscar el cliente",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String numero = jTextFieldBuscarID.getText();
            if (!validaEntero(numero)) {
                JOptionPane.showMessageDialog(this, "Porfavor solo escriba numero el id del cliente es un numero",
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (numero.length() > 10) {
                    JOptionPane.showMessageDialog(this, "El maximo numero permitido de caracteres es 10, ejemplo 1234567890",
                            "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    Cliente cliente = this.clienteDAO.consultar(Integer.valueOf(numero));
                    if (cliente != null) {
                        this.llenarFormulario(cliente);
                    }
                }
            }
        }
        this.jTextFieldBuscarID.setText("");
    }

    /**
     * Metodo que guarda o actualiza un cliente.
     */
    private void guardar() {
        if (this.jTextFieldIDCliente.getText().isEmpty()) {
            this.agregar();
        } else {
            this.actualizar();
        }
    }

    /**
     * Metodo que actualiza un cliente.
     */
    private void actualizar() {
        Integer idCliente = Integer.valueOf(this.jTextFieldIDCliente.getText());
        //Hacer todas las verificaciones
        if (this.verificarDatosVacios()) {
            return;
        }

        if (this.verificarCantidadTamanho()) {
            return;
        }

        if (this.verificarTelefono()) {
            return;
        }

        String nombre = this.jTextFieldNombre.getText();
        String direccion = this.jTextFieldDireccion.getText();
        String telefono = this.jTextFieldTelefono.getText();
        Cliente cliente = new Cliente(idCliente, nombre, direccion, telefono);
        boolean seActualizoCliente = this.clienteDAO.actualizar(cliente);
        if (seActualizoCliente) {
            JOptionPane.showMessageDialog(this, "Se actualizo el cliente",
                    "Informacion", JOptionPane.INFORMATION_MESSAGE);
            this.limpiar();
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el cliente",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metodo que valida si la cadena es un entero.
     *
     * @param s La cadena a evaluar
     * @return true si es entero, false en caso contrario
     */
    private boolean validaEntero(String s) {
        CharSequence cadena = s.trim();
        String reCadena = "^\\d+$";
        Pattern pattern = Pattern.compile(reCadena);
        Matcher matcher = pattern.matcher(cadena);
        return matcher.matches();
    }

    /**
     * Metodo que verifica si el telefono cumple con lo necesario tamaño, y
     * entero.
     *
     * @return true si el telefono no cumple con los requisitos, false en caso
     * contrario
     */
    private boolean verificarTelefono() {
        String telefono = this.jTextFieldTelefono.getText();
        if (telefono.length() != 0) {
            if (!this.validaEntero(telefono)) {
                JOptionPane.showMessageDialog(this, "Solo se aceptan numeros",
                        "Error en celular", JOptionPane.ERROR_MESSAGE);
                return true;
            }
            if (telefono.length() > 14) {
                JOptionPane.showMessageDialog(this, "El maximo numero de digitos es 14",
                        "Error en celular", JOptionPane.ERROR_MESSAGE);
                return true;
            }
        }
        return false;
    }

    /**
     * Metodo que evalua si los campos de texto nombre y dirección no estan
     * vacios.
     *
     * @return true si estos no cumplen, false en caso contrario
     */
    private boolean verificarDatosVacios() {
        if (this.jTextFieldNombre.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir el nombre antes de guardar/actualizar..",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (this.jTextFieldDireccion.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Es necesario escribir la direccion antes de guardar/actualizar..",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo que verifica si los campo de texto nombre y dirección sobrepasan
     * un tamaño limite
     *
     * @return true si estos no cumplen, false en caso contrario
     */
    private boolean verificarCantidadTamanho() {
        String nombre = this.jTextFieldNombre.getText();
        String direccion = this.jTextFieldDireccion.getText();
        if (nombre.length() > 100) {
            JOptionPane.showMessageDialog(this, "El nombre es demasiado largo, maximo 100 caracteres.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        if (direccion.length() > 100) {
            JOptionPane.showMessageDialog(this, "La direccion es demasiada larga, maximo 200 caracteres.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    /**
     * Metodo que agrega un cliente
     */
    private void agregar() {
        if (this.verificarDatosVacios()) {
            return;
        }

        if (this.verificarCantidadTamanho()) {
            return;
        }

        if (this.verificarTelefono()) {
            return;
        }

        String nombre = this.jTextFieldNombre.getText();
        String direccion = this.jTextFieldDireccion.getText();
        String telefono = this.jTextFieldTelefono.getText();
        Cliente cliente = new Cliente(nombre, direccion, telefono);
        boolean seAgregoCliente = this.clienteDAO.agregar(cliente);
        if (seAgregoCliente) {
            JOptionPane.showMessageDialog(this, "Se agrego el cliente",
                    "Informacion", JOptionPane.INFORMATION_MESSAGE);
            this.limpiar();
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo agregar el cliente",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metodo que llena todos los campos de texto con los datos del cliente
     *
     * @param cliente Cliente a llenar
     */
    public void llenarFormulario(Cliente cliente) {
        this.jTextFieldIDCliente.setText(String.valueOf(cliente.getIdCliente()));
        this.jTextFieldNombre.setText(cliente.getNombre());
        this.jTextFieldDireccion.setText(cliente.getDireccion());
        this.jTextFieldTelefono.setText(cliente.getTelefono());
    }

    /**
     * Metodo que limpia todos los campos de texto
     */
    private void limpiar() {
        this.jTextFieldIDCliente.setText("");
        this.jTextFieldNombre.setText("");
        this.jTextFieldDireccion.setText("");
        this.jTextFieldTelefono.setText("");
        this.jTextFieldBuscarID.setText("");
    }

    /**
     * Metodo que edita los datos del cliente.
     */
    private void editar() {
        Integer idClienteEditar = this.getIDClienteSeleccionado();
        if (idClienteEditar == null) {
            JOptionPane.showMessageDialog(this, "Debes de seleccionar un cliente para poder editarlo",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Cliente cliente = this.clienteDAO.consultar(idClienteEditar);
        if (cliente != null) {
            this.llenarFormulario(cliente);
        }
    }

    /**
     * Metodo que elimina un cliente.
     */
    private void eliminar() {
        Integer idClienteEliminar = this.getIDClienteSeleccionado();
        if (idClienteEliminar == null) {
            JOptionPane.showMessageDialog(this, "Debes de seleccionar un cliente para eliminarlo",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int opcionSelecionada = JOptionPane.showConfirmDialog(this, "Estas Seguro de eliminar el cliente", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcionSelecionada == JOptionPane.NO_OPTION) {
            return;
        }
        boolean seEliminoSocio = this.clienteDAO.eliminar(idClienteEliminar);
        if (seEliminoSocio) {
            JOptionPane.showMessageDialog(this, "Se elimino el cliente",
                    "Informacion", JOptionPane.INFORMATION_MESSAGE);
            this.llenarTabla();
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo eliminar el cliente, este esta relacionado con un evento, si desea eliminarlo"
                    + "porfavor elimine el evento",
                    "Error de eliminar", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Metodo que obtiene el id del cliente
     *
     * @return El ID del cliente
     */
    private Integer getIDClienteSeleccionado() {
        int indiceFilaSe = this.jTableClientes.getSelectedRow();
        if (indiceFilaSe != -1) {
            DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableClientes.getModel();
            int indiceColumna = 0;
            Integer id = (Integer) modeloTabla.getValueAt(indiceFilaSe, indiceColumna);
            return id;
        } else {
            return null;
        }
    }

    /**
     * Metodo que llena la tabla con los clientes actuales.
     */
    private void llenarTabla() {
        List<Cliente> listaClientes = this.clienteDAO.consultarTodos();
        DefaultTableModel modeloTabla = (DefaultTableModel) this.jTableClientes.getModel();
        modeloTabla.setRowCount(0);
        listaClientes.forEach(cliente -> {
            Object[] fila = new Object[4];
            fila[0] = cliente.getIdCliente();
            fila[1] = cliente.getNombre();
            fila[2] = cliente.getDireccion();
            fila[3] = cliente.getTelefono();
            modeloTabla.addRow(fila);
        }
        );

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JLabel jLabelDireccion;
    private javax.swing.JLabel jLabelIDCliente;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelTeléfono;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableClientes;
    private javax.swing.JTextField jTextFieldBuscarID;
    private javax.swing.JTextField jTextFieldDireccion;
    private javax.swing.JTextField jTextFieldIDCliente;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldTelefono;
    private javax.swing.JPanel tablaSocios;
    // End of variables declaration//GEN-END:variables
}
